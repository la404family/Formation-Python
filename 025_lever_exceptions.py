#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
======================================================================
LEVER DES EXCEPTIONS EN PYTHON - GUIDE COMPLET
======================================================================

üéØ Ce fichier couvre comment lever des exceptions :
   ‚Ä¢ Instruction raise
   ‚Ä¢ Exceptions personnalis√©es
   ‚Ä¢ Re-lever des exceptions
   ‚Ä¢ Cha√Ænage d'exceptions
   ‚Ä¢ Assertions et debugging

üìö Concepts abord√©s :
   ‚Ä¢ raise Exception("message")
   ‚Ä¢ Cr√©ation de classes d'exception
   ‚Ä¢ raise...from pour cha√Ænage
   ‚Ä¢ assert pour conditions
   ‚Ä¢ Debugging avec exceptions

üí° Objectif : Ma√Ætriser la cr√©ation et le lever d'exceptions
"""

print("=" * 70)
print("LEVER DES EXCEPTIONS EN PYTHON - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. INSTRUCTION RAISE DE BASE")
print("=" * 50)

print("\nüöÄ LEVER DES EXCEPTIONS SIMPLES")
print("-" * 30)


def demo_raise_simple():
    """D√©monstration de l'instruction raise de base"""

    print("üöÄ Lever des exceptions simples :")

    def valider_age(age):
        """Valider un √¢ge avec raise"""
        if not isinstance(age, int):
            raise TypeError(
                f"L'√¢ge doit √™tre un entier, re√ßu {type(age).__name__}")

        if age < 0:
            raise ValueError(f"L'√¢ge ne peut pas √™tre n√©gatif : {age}")

        if age > 150:
            raise ValueError(f"L'√¢ge semble irr√©aliste : {age}")

        return True

    def calculer_racine_carree(x):
        """Calculer la racine carr√©e avec validation"""
        if not isinstance(x, (int, float)):
            raise TypeError("Le param√®tre doit √™tre un nombre")

        if x < 0:
            raise ValueError(
                "Impossible de calculer la racine d'un nombre n√©gatif")

        return x ** 0.5

    # Tests de validation d'√¢ge
    print("\n   1Ô∏è‚É£ Tests de validation d'√¢ge :")
    ages_test = [25, -5, 200, "trente", 45.5]

    for age in ages_test:
        print(f"      Test age {age} :", end=" ")
        try:
            valider_age(age)
            print("‚úÖ Valide")
        except (TypeError, ValueError) as e:
            print(f"‚ùå {type(e).__name__}: {e}")

    # Tests de racine carr√©e
    print("\n   2Ô∏è‚É£ Tests de racine carr√©e :")
    valeurs_test = [9, -4, "abc", 16.0, 0]

    for valeur in valeurs_test:
        print(f"      Racine de {valeur} :", end=" ")
        try:
            resultat = calculer_racine_carree(valeur)
            print(f"‚úÖ {resultat:.2f}")
        except (TypeError, ValueError) as e:
            print(f"‚ùå {type(e).__name__}: {e}")


demo_raise_simple()

print("\nüîÑ RE-LEVER DES EXCEPTIONS")
print("-" * 26)


def demo_re_raise():
    """D√©monstration du re-lever d'exceptions"""

    print("üîÑ Re-lever des exceptions :")

    def diviser_avec_log(a, b):
        """Division avec logging et re-raise"""
        print(f"      üßÆ Tentative de division : {a} / {b}")

        try:
            resultat = a / b
            print(f"      ‚úÖ R√©sultat : {resultat}")
            return resultat
        except ZeroDivisionError as e:
            print(f"      üìù Log : Division par z√©ro d√©tect√©e √† {__name__}")
            # Re-lever l'exception apr√®s logging
            raise  # √âquivalent √† : raise e
        except TypeError as e:
            print(f"      üìù Log : Erreur de type dans la division")
            # Modifier et re-lever
            raise TypeError(
                f"Types invalides pour division : {type(a)}, {type(b)}") from e

    def traitement_avec_gestion(donnees):
        """Traitement qui g√®re et transforme les exceptions"""
        try:
            return diviser_avec_log(donnees[0], donnees[1])
        except (ZeroDivisionError, TypeError) as e:
            print(f"      üö® Gestion niveau sup√©rieur : {type(e).__name__}")
            # Transformer en exception m√©tier
            raise RuntimeError(
                f"Impossible de traiter les donn√©es {donnees}") from e

    # Tests de re-raise
    print("\n   Tests de re-raise :")
    tests = [
        ([10, 2], "Division normale"),
        ([10, 0], "Division par z√©ro"),
        ([10, "abc"], "Type invalide"),
        (["hello", 5], "Types incompatibles"),
    ]

    for donnees, description in tests:
        print(f"\n   üìã Test : {description}")
        try:
            resultat = traitement_avec_gestion(donnees)
            print(f"   üéâ Succ√®s : {resultat}")
        except RuntimeError as e:
            print(f"   üíÄ √âchec final : {e}")
            # Afficher la cha√Æne d'exceptions
            cause = e.__cause__
            if cause:
                print(f"   üîó Caus√© par : {type(cause).__name__}: {cause}")


demo_re_raise()

print("\n" + "=" * 50)
print("2. EXCEPTIONS PERSONNALIS√âES")
print("=" * 50)

print("\nüé® CR√âER DES EXCEPTIONS CUSTOM")
print("-" * 30)

# D√©finition d'exceptions personnalis√©es


class ValidationError(Exception):
    """Exception pour les erreurs de validation"""

    def __init__(self, message, field=None, value=None):
        super().__init__(message)
        self.field = field
        self.value = value
        self.message = message


class BusinessLogicError(Exception):
    """Exception pour les erreurs de logique m√©tier"""

    def __init__(self, message, error_code=None, context=None):
        super().__init__(message)
        self.message = message
        self.error_code = error_code
        self.context = context or {}


class ConfigurationError(Exception):
    """Exception pour les erreurs de configuration"""
    pass


class DatabaseError(Exception):
    """Exception pour les erreurs de base de donn√©es"""

    def __init__(self, message, query=None, connection_info=None):
        super().__init__(message)
        self.message = message
        self.query = query
        self.connection_info = connection_info


def demo_exceptions_personnalisees():
    """D√©monstration des exceptions personnalis√©es"""

    print("üé® Exceptions personnalis√©es :")

    def valider_utilisateur(donnees):
        """Validation d'utilisateur avec exceptions custom"""

        # Validation du nom
        if "nom" not in donnees:
            raise ValidationError("Le nom est requis", field="nom")

        nom = donnees["nom"]
        if not isinstance(nom, str) or len(nom.strip()) < 2:
            raise ValidationError(
                "Le nom doit √™tre une cha√Æne d'au moins 2 caract√®res",
                field="nom",
                value=nom
            )

        # Validation de l'email
        if "email" not in donnees:
            raise ValidationError("L'email est requis", field="email")

        email = donnees["email"]
        if "@" not in email or "." not in email:
            raise ValidationError(
                "Format d'email invalide",
                field="email",
                value=email
            )

        # Validation de l'√¢ge
        if "age" in donnees:
            age = donnees["age"]
            if not isinstance(age, int) or age < 0 or age > 150:
                raise ValidationError(
                    "L'√¢ge doit √™tre un entier entre 0 et 150",
                    field="age",
                    value=age
                )

        return True

    def creer_compte_utilisateur(donnees):
        """Cr√©ation de compte avec logique m√©tier"""

        # Validation des donn√©es
        try:
            valider_utilisateur(donnees)
        except ValidationError as e:
            # Transformer en erreur m√©tier
            raise BusinessLogicError(
                f"Impossible de cr√©er le compte : {e.message}",
                error_code="INVALID_USER_DATA",
                context={"field": e.field, "value": e.value}
            ) from e

        # Simulation de logique m√©tier
        email = donnees["email"]
        if email.endswith("@spam.com"):
            raise BusinessLogicError(
                "Domaine email non autoris√©",
                error_code="FORBIDDEN_DOMAIN",
                context={"domain": "spam.com"}
            )

        # Simulation d'erreur de base de donn√©es
        if donnees["nom"].lower() == "error":
            raise DatabaseError(
                "Erreur de base de donn√©es lors de l'insertion",
                query="INSERT INTO users (nom, email) VALUES (?, ?)",
                connection_info="localhost:5432"
            )

        return {"id": 12345, "nom": donnees["nom"], "email": email}

    # Tests avec exceptions personnalis√©es
    print("\n   Tests de validation et cr√©ation de compte :")

    utilisateurs_test = [
        ({"nom": "Alice Dupont", "email": "alice@test.com",
         "age": 25}, "Utilisateur valide"),
        ({"email": "bob@test.com"}, "Nom manquant"),
        ({"nom": "A", "email": "alice@test.com"}, "Nom trop court"),
        ({"nom": "Charlie", "email": "email-invalide"}, "Email invalide"),
        ({"nom": "Diane", "email": "diane@test.com", "age": -5}, "√Çge invalide"),
        ({"nom": "Eve", "email": "eve@spam.com"}, "Domaine interdit"),
        ({"nom": "error", "email": "test@test.com"}, "Erreur base de donn√©es"),
    ]

    for donnees, description in utilisateurs_test:
        print(f"\n   üìã Test : {description}")
        print(f"      Donn√©es : {donnees}")

        try:
            utilisateur = creer_compte_utilisateur(donnees)
            print(f"      ‚úÖ Compte cr√©√© : {utilisateur}")
        except ValidationError as e:
            print(f"      ‚ùå Validation : {e.message}")
            if e.field:
                print(f"         Champ : {e.field}")
            if e.value:
                print(f"         Valeur : {e.value}")
        except BusinessLogicError as e:
            print(f"      ‚ùå Logique m√©tier : {e.message}")
            print(f"         Code : {e.error_code}")
            print(f"         Contexte : {e.context}")
        except DatabaseError as e:
            print(f"      ‚ùå Base de donn√©es : {e.message}")
            if e.query:
                print(f"         Requ√™te : {e.query}")


demo_exceptions_personnalisees()

print("\nüèóÔ∏è HI√âRARCHIE D'EXCEPTIONS")
print("-" * 27)


def demo_hierarchie_exceptions():
    """D√©monstration d'une hi√©rarchie d'exceptions"""

    print("üèóÔ∏è Hi√©rarchie d'exceptions :")

    # Hi√©rarchie d'exceptions pour une application
    class AppError(Exception):
        """Exception de base de l'application"""
        pass

    class UserError(AppError):
        """Erreurs li√©es aux utilisateurs"""
        pass

    class AuthenticationError(UserError):
        """Erreurs d'authentification"""
        pass

    class AuthorizationError(UserError):
        """Erreurs d'autorisation"""
        pass

    class DataError(AppError):
        """Erreurs li√©es aux donn√©es"""
        pass

    class ValidationError(DataError):
        """Erreurs de validation des donn√©es"""
        pass

    class IntegrityError(DataError):
        """Erreurs d'int√©grit√© des donn√©es"""
        pass

    def simuler_operations():
        """Simuler diff√©rentes op√©rations avec exceptions"""

        operations = [
            ("login", "user_inexistant", AuthenticationError, "Utilisateur inexistant"),
            ("access_admin", "user_normal",
             AuthorizationError, "Droits insuffisants"),
            ("validate_data", "data_invalid", ValidationError, "Donn√©es invalides"),
            ("save_data", "constraint_violation",
             IntegrityError, "Violation contrainte"),
            ("normal_op", "success", None, "Op√©ration r√©ussie"),
        ]

        for operation, scenario, exception_type, message in operations:
            print(f"\n      üîß Op√©ration : {operation} ({scenario})")

            try:
                if exception_type:
                    raise exception_type(message)
                else:
                    print(f"         ‚úÖ {message}")
            except AuthenticationError as e:
                print(f"         üîê Erreur d'authentification : {e}")
            except AuthorizationError as e:
                print(f"         üö´ Erreur d'autorisation : {e}")
            except ValidationError as e:
                print(f"         üìù Erreur de validation : {e}")
            except IntegrityError as e:
                print(f"         üîó Erreur d'int√©grit√© : {e}")
            except UserError as e:
                print(f"         üë§ Erreur utilisateur g√©n√©rique : {e}")
            except DataError as e:
                print(f"         üìä Erreur de donn√©es g√©n√©rique : {e}")
            except AppError as e:
                print(f"         üè† Erreur application g√©n√©rique : {e}")

    simuler_operations()


demo_hierarchie_exceptions()

print("\n" + "=" * 50)
print("3. CHA√éNAGE D'EXCEPTIONS")
print("=" * 50)

print("\nüîó CHA√éNER DES EXCEPTIONS")
print("-" * 24)


def demo_chainement_exceptions():
    """D√©monstration du cha√Ænage d'exceptions"""

    print("üîó Cha√Ænage d'exceptions avec 'from' :")

    def lire_configuration(fichier):
        """Lire un fichier de configuration avec cha√Ænage"""
        try:
            with open(fichier, 'r') as f:
                contenu = f.read()
        except FileNotFoundError as e:
            raise ConfigurationError(
                f"Fichier de configuration manquant : {fichier}") from e

        try:
            import json
            config = json.loads(contenu)
        except json.JSONDecodeError as e:
            raise ConfigurationError(
                f"Format JSON invalide dans {fichier}") from e

        return config

    def valider_configuration(config):
        """Valider la configuration avec cha√Ænage"""
        try:
            if "database" not in config:
                raise KeyError("Section 'database' manquante")

            db_config = config["database"]
            if "host" not in db_config:
                raise KeyError("Param√®tre 'host' manquant dans database")

        except KeyError as e:
            raise ConfigurationError(f"Configuration incompl√®te : {e}") from e

    def initialiser_application(fichier_config):
        """Initialiser l'application avec cha√Ænage complet"""
        try:
            # √âtape 1 : Lire la configuration
            config = lire_configuration(fichier_config)

            # √âtape 2 : Valider la configuration
            valider_configuration(config)

            # √âtape 3 : Initialiser (simulation)
            if config.get("database", {}).get("host") == "invalid_host":
                raise ConnectionError("Impossible de se connecter √† la base")

            return "Application initialis√©e avec succ√®s"

        except ConfigurationError:
            # Re-lever les erreurs de configuration
            raise
        except ConnectionError as e:
            # Cha√Æner les erreurs de connexion
            raise RuntimeError(
                "√âchec d'initialisation de l'application") from e

    # Tests de cha√Ænage
    print("\n   Tests de cha√Æne d'exceptions :")

    # Cr√©er des fichiers de test temporaires
    import json
    import os

    # Fichier valide
    config_valide = {"database": {"host": "localhost", "port": 5432}}
    with open("config_valide.json", "w") as f:
        json.dump(config_valide, f)

    # Fichier JSON invalide
    with open("config_invalide.json", "w") as f:
        f.write("{ invalid json }")

    # Fichier avec configuration incompl√®te
    config_incomplete = {"other": "value"}
    with open("config_incomplete.json", "w") as f:
        json.dump(config_incomplete, f)

    # Fichier avec host invalide
    config_host_invalide = {"database": {"host": "invalid_host"}}
    with open("config_host_invalide.json", "w") as f:
        json.dump(config_host_invalide, f)

    # Tests
    tests_config = [
        ("config_valide.json", "Configuration valide"),
        ("config_inexistant.json", "Fichier inexistant"),
        ("config_invalide.json", "JSON invalide"),
        ("config_incomplete.json", "Configuration incompl√®te"),
        ("config_host_invalide.json", "Host de base invalide"),
    ]

    for fichier, description in tests_config:
        print(f"\n   üìã Test : {description}")

        try:
            resultat = initialiser_application(fichier)
            print(f"      ‚úÖ Succ√®s : {resultat}")
        except Exception as e:
            print(f"      ‚ùå {type(e).__name__} : {e}")

            # Afficher la cha√Æne d'exceptions
            cause = e.__cause__
            niveau = 1
            while cause:
                print(
                    f"      {'  ' * niveau}üîó Caus√© par : {type(cause).__name__}: {cause}")
                cause = cause.__cause__
                niveau += 1

    # Nettoyage
    for fichier in ["config_valide.json", "config_invalide.json", "config_incomplete.json", "config_host_invalide.json"]:
        if os.path.exists(fichier):
            os.remove(fichier)


demo_chainement_exceptions()

print("\n" + "=" * 50)
print("4. ASSERTIONS ET DEBUGGING")
print("=" * 50)

print("\nüêõ ASSERTIONS POUR LE DEBUGGING")
print("-" * 31)


def demo_assertions():
    """D√©monstration des assertions"""

    print("üêõ Assertions pour le debugging :")

    def calculer_moyenne(valeurs):
        """Calculer la moyenne avec assertions"""
        # Assertions pour v√©rifier les pr√©conditions
        assert isinstance(
            valeurs, list), f"Attendu une liste, re√ßu {type(valeurs)}"
        assert len(valeurs) > 0, "La liste ne peut pas √™tre vide"
        assert all(isinstance(v, (int, float))
                   for v in valeurs), "Tous les √©l√©ments doivent √™tre num√©riques"

        moyenne = sum(valeurs) / len(valeurs)

        # Assertion pour v√©rifier la postcondition
        assert isinstance(moyenne, (int, float)
                          ), "La moyenne doit √™tre num√©rique"

        return moyenne

    def diviser_securise(a, b):
        """Division s√©curis√©e avec assertions"""
        assert isinstance(
            a, (int, float)), f"a doit √™tre num√©rique, re√ßu {type(a)}"
        assert isinstance(
            b, (int, float)), f"b doit √™tre num√©rique, re√ßu {type(b)}"
        assert b != 0, "Division par z√©ro interdite"

        resultat = a / b

        # V√©rification du r√©sultat
        assert isinstance(resultat, (int, float)
                          ), "Le r√©sultat doit √™tre num√©rique"

        return resultat

    def factorielle(n):
        """Calcul de factorielle avec assertions"""
        assert isinstance(n, int), f"n doit √™tre un entier, re√ßu {type(n)}"
        assert n >= 0, f"n doit √™tre positif ou nul, re√ßu {n}"

        if n <= 1:
            return 1

        resultat = 1
        for i in range(2, n + 1):
            resultat *= i
            # Assertion pour v√©rifier que le r√©sultat grandit
            assert resultat > 0, "Le r√©sultat ne devrait jamais √™tre n√©gatif"

        return resultat

    # Tests des assertions
    print("\n   1Ô∏è‚É£ Tests de calcul de moyenne :")

    tests_moyenne = [
        ([1, 2, 3, 4, 5], "Liste valide"),
        ([], "Liste vide"),
        ("pas une liste", "Type incorrect"),
        ([1, 2, "trois"], "√âl√©ments non num√©riques"),
        ([10, 20, 30], "Cas valide 2"),
    ]

    for valeurs, description in tests_moyenne:
        print(f"      Test : {description}")
        print(f"      Valeurs : {valeurs}")

        try:
            moyenne = calculer_moyenne(valeurs)
            print(f"      ‚úÖ Moyenne : {moyenne}")
        except AssertionError as e:
            print(f"      ‚ùå Assertion √©chou√©e : {e}")
        except Exception as e:
            print(f"      üí• Autre erreur : {type(e).__name__}: {e}")

    print("\n   2Ô∏è‚É£ Tests de division s√©curis√©e :")

    tests_division = [
        ((10, 2), "Division normale"),
        ((10, 0), "Division par z√©ro"),
        (("10", 2), "Type incorrect a"),
        ((10, "2"), "Type incorrect b"),
        ((15, 3), "Cas valide 2"),
    ]

    for (a, b), description in tests_division:
        print(f"      Test : {description} - {a} / {b}")

        try:
            resultat = diviser_securise(a, b)
            print(f"      ‚úÖ R√©sultat : {resultat}")
        except AssertionError as e:
            print(f"      ‚ùå Assertion √©chou√©e : {e}")

    print("\n   3Ô∏è‚É£ Tests de factorielle :")

    tests_factorielle = [5, 0, -1, 3.5, "5"]

    for n in tests_factorielle:
        print(f"      Factorielle de {n} :", end=" ")

        try:
            resultat = factorielle(n)
            print(f"‚úÖ {resultat}")
        except AssertionError as e:
            print(f"‚ùå {e}")
        except Exception as e:
            print(f"üí• {type(e).__name__}: {e}")


demo_assertions()

print("\nüîß DEBUGGING AVANC√â AVEC EXCEPTIONS")
print("-" * 37)


def demo_debugging_avance():
    """D√©monstration du debugging avanc√©"""

    print("üîß Debugging avanc√© avec exceptions :")

    import traceback
    import sys

    def fonction_avec_erreur(niveau=0):
        """Fonction qui g√©n√®re une erreur √† diff√©rents niveaux"""
        if niveau == 0:
            return fonction_avec_erreur(1)
        elif niveau == 1:
            return fonction_avec_erreur(2)
        elif niveau == 2:
            # G√©n√©rer une erreur ici
            x = 1 / 0  # Division par z√©ro

    def analyser_exception_detaillee():
        """Analyser une exception en d√©tail"""
        try:
            fonction_avec_erreur()
        except Exception as e:
            print(f"\n      üîç Analyse d√©taill√©e de l'exception :")
            print(f"      Type : {type(e).__name__}")
            print(f"      Message : {e}")
            print(f"      Args : {e.args}")

            print(f"\n      üìö Stack trace compl√®te :")
            traceback.print_exc()

            print(f"\n      üìã Stack trace format√©e :")
            tb_lines = traceback.format_exception(type(e), e, e.__traceback__)
            for line in tb_lines:
                print(f"         {line.strip()}")

            print(f"\n      üéØ Informations sur la frame :")
            tb = e.__traceback__
            while tb:
                frame = tb.tb_frame
                print(f"         Fichier : {frame.f_code.co_filename}")
                print(f"         Fonction : {frame.f_code.co_name}")
                print(f"         Ligne : {tb.tb_lineno}")
                print(
                    f"         Variables locales : {list(frame.f_locals.keys())}")
                tb = tb.tb_next
                if tb:
                    print(f"         ---")

    analyser_exception_detaillee()


demo_debugging_avance()

print("\n" + "=" * 50)
print("5. R√âSUM√â FINAL")
print("=" * 50)

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üöÄ INSTRUCTION RAISE :
   ‚Ä¢ raise Exception("message") pour lever
   ‚Ä¢ raise sans param√®tre pour re-lever
   ‚Ä¢ raise NewException from old_exception pour cha√Æner

2. üé® EXCEPTIONS PERSONNALIS√âES :
   ‚Ä¢ class MyError(Exception): pass
   ‚Ä¢ H√©riter d'exceptions appropri√©es
   ‚Ä¢ Ajouter des attributs sp√©cifiques
   ‚Ä¢ Cr√©er des hi√©rarchies logiques

3. üîó CHA√éNAGE D'EXCEPTIONS :
   ‚Ä¢ raise...from pour pr√©server la cause
   ‚Ä¢ __cause__ contient l'exception d'origine
   ‚Ä¢ Facilite le debugging en gardant le contexte

4. üêõ ASSERTIONS :
   ‚Ä¢ assert condition, "message"
   ‚Ä¢ Pour v√©rifier les invariants
   ‚Ä¢ D√©sactiv√©es avec python -O
   ‚Ä¢ Utiles pour le debugging et les tests

5. üîß DEBUGGING AVANC√â :
   ‚Ä¢ traceback module pour stack traces
   ‚Ä¢ Inspection des frames d'ex√©cution
   ‚Ä¢ Variables locales dans chaque frame
   ‚Ä¢ Formatage personnalis√© des erreurs

üí° BONNES PRATIQUES :
‚úÖ Exceptions sp√©cifiques et informatives
‚úÖ Hi√©rarchie logique d'exceptions
‚úÖ Cha√Ænage pour pr√©server le contexte
‚úÖ Messages d'erreur clairs et utiles
‚úÖ Assertions pour invariants et pr√©conditions

üö® √Ä √âVITER :
‚ùå Lever Exception g√©n√©rique
‚ùå Messages d'erreur vagues
‚ùå Casser la cha√Æne d'exceptions
‚ùå Assertions pour validation utilisateur
‚ùå Masquer les informations de debug

‚ö° PATTERNS AVANC√âS :
‚Ä¢ Context managers pour nettoyage automatique
‚Ä¢ D√©corateurs pour gestion d'erreurs r√©p√©titives
‚Ä¢ Factory patterns pour cr√©ation d'exceptions
‚Ä¢ Observer pattern pour logging d'erreurs

üéâ F√©licitations ! Lever d'exceptions ma√Ætris√© !
üí° Prochaine √©tape : Lecture de fichiers !
üìö Exceptions lev√©es, fichiers √† d√©couvrir !
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE - LEVER D'EXCEPTIONS MA√éTRIS√â !")
print("=" * 70)
