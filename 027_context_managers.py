#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
======================================================================
CONTEXT MANAGERS EN PYTHON - GUIDE COMPLET
======================================================================

üéØ Ce fichier couvre les context managers en d√©tail :
   ‚Ä¢ Protocole __enter__ et __exit__
   ‚Ä¢ Statement with et gestion automatique
   ‚Ä¢ Context managers built-in
   ‚Ä¢ Cr√©ation de context managers personnalis√©s
   ‚Ä¢ D√©corateur @contextmanager
   ‚Ä¢ Patterns avanc√©s et cas d'usage

üìö Concepts abord√©s :
   ‚Ä¢ RAII (Resource Acquisition Is Initialization)
   ‚Ä¢ Gestion automatique des ressources
   ‚Ä¢ Exception handling dans les contexts
   ‚Ä¢ Context managers imbriqu√©s
   ‚Ä¢ Async context managers
   ‚Ä¢ Best practices et optimisations

üí° Objectif : Ma√Ætriser la gestion propre des ressources
"""

from contextlib import ExitStack
from contextlib import contextmanager
import os

print("=" * 70)
print("CONTEXT MANAGERS EN PYTHON - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. CONCEPTS FONDAMENTAUX")
print("=" * 50)

print("\nüéØ QU'EST-CE QU'UN CONTEXT MANAGER ?")
print("-" * 37)

print("""
üéØ D√âFINITION :
Un context manager est un objet qui d√©finit le contexte d'ex√©cution
√† utiliser avec le statement 'with'. Il garantit l'ex√©cution de code
de nettoyage m√™me en cas d'exception.

üîÑ PROTOCOLE CONTEXT MANAGER :
Un objet context manager doit impl√©menter deux m√©thodes :
‚Ä¢ __enter__() : setup, appel√©e en entrant dans le 'with'
‚Ä¢ __exit__()  : cleanup, appel√©e en sortant du 'with'

‚ö° PRINCIPE RAII :
Resource Acquisition Is Initialization
‚Ä¢ Acqu√©rir la ressource √† l'entr√©e
‚Ä¢ Lib√©rer la ressource √† la sortie
‚Ä¢ M√™me en cas d'exception !

üí° AVANTAGES :
‚Ä¢ Code plus s√ªr et lisible
‚Ä¢ Gestion automatique des ressources
‚Ä¢ √âvite les fuites de m√©moire/fichiers
‚Ä¢ Exception safety garantie
‚Ä¢ Pattern standardis√© et pythonique
""")

print("\nüé≠ SYNTAXE WITH")
print("-" * 15)

print("""
üé≠ SYNTAXE DE BASE :

with context_manager as variable:
    # Code utilisant la ressource
    pass
# Nettoyage automatique ici

üîÑ √âQUIVALENT SANS WITH :
try:
    resource = context_manager.__enter__()
    variable = resource
    # Code utilisant la ressource
finally:
    context_manager.__exit__(exc_type, exc_value, traceback)

üìä INFORMATIONS D'EXCEPTION :
__exit__ re√ßoit trois param√®tres :
‚Ä¢ exc_type : type d'exception (None si pas d'exception)
‚Ä¢ exc_value : instance d'exception 
‚Ä¢ exc_traceback : objet traceback
""")

print("\n" + "=" * 50)
print("2. CONTEXT MANAGERS BUILT-IN")
print("=" * 50)

print("\nüìÇ FICHIERS - LE CAS CLASSIQUE")
print("-" * 31)


def demo_context_manager_fichier():
    """D√©monstration avec les fichiers (context manager built-in)"""

    print("üìÇ Context manager avec fichiers :")

    # Cr√©er le r√©pertoire si n√©cessaire
    import os
    os.makedirs("context_demo", exist_ok=True)

    try:
        # Utilisation normale avec with
        print("   1Ô∏è‚É£ Utilisation normale avec 'with' :")
        with open("context_demo/test.txt", "w", encoding="utf-8") as f:
            print(f"      Fichier ouvert : {f.name}")
            print(f"      Ferm√© ? {f.closed}")
            f.write("Contenu de test\n")
            f.write("Deuxi√®me ligne\n")
            print(f"      √âcriture effectu√©e")

        print(f"      Apr√®s with - Ferm√© ? {f.closed}")

        # Comparaison sans with (mauvaise pratique)
        print("\n   2Ô∏è‚É£ Sans 'with' (mauvaise pratique) :")
        f = open("context_demo/test2.txt", "w", encoding="utf-8")
        print(f"      Fichier ouvert : {f.name}")
        print(f"      Ferm√© ? {f.closed}")
        f.write("Contenu sans with\n")
        # Oubli volontaire du close() !
        print(f"      Oubli de close() - Ferm√© ? {f.closed}")
        f.close()  # Ne pas oublier !

        # With avec exception
        print("\n   3Ô∏è‚É£ 'With' avec exception :")
        try:
            with open("context_demo/test3.txt", "w", encoding="utf-8") as f:
                f.write("D√©but d'√©criture\n")
                print(f"      Avant exception - Ferm√© ? {f.closed}")
                raise ValueError("Erreur simul√©e")
                f.write("Cette ligne ne sera jamais √©crite\n")
        except ValueError as e:
            print(f"      Exception captur√©e : {e}")
            print(f"      Apr√®s exception - Ferm√© ? {f.closed}")

    except Exception as e:
        print(f"   ‚ùå Erreur : {e}")


demo_context_manager_fichier()

print("\nüîí THREADING.LOCK")
print("-" * 17)


def demo_context_manager_lock():
    """D√©monstration avec threading.Lock"""
    import threading
    import time

    print("üîí Context manager avec threading.Lock :")

    # Ressource partag√©e
    compteur = {"valeur": 0}
    verrou = threading.Lock()

    def incrementer_avec_with(nom, iterations):
        """Incr√©menter avec context manager"""
        for i in range(iterations):
            with verrou:  # Acquisition automatique du verrou
                # Section critique
                valeur_actuelle = compteur["valeur"]
                time.sleep(0.001)  # Simuler du travail
                compteur["valeur"] = valeur_actuelle + 1
                print(f"      {nom} : {compteur['valeur']}")
            # Lib√©ration automatique du verrou ici

    def incrementer_sans_with(nom, iterations):
        """Incr√©menter sans context manager (dangereux)"""
        for i in range(iterations):
            verrou.acquire()
            try:
                # Section critique
                valeur_actuelle = compteur["valeur"]
                time.sleep(0.001)
                compteur["valeur"] = valeur_actuelle + 1
                print(f"      {nom} : {compteur['valeur']}")
            finally:
                verrou.release()  # Ne pas oublier !

    print("   üéØ Test avec context manager :")

    # Reset du compteur
    compteur["valeur"] = 0

    # Cr√©er des threads
    threads = []
    for i in range(2):
        thread = threading.Thread(
            target=incrementer_avec_with,
            args=(f"Thread-{i+1}", 3)
        )
        threads.append(thread)

    # Lancer et attendre
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()

    print(f"   ‚úÖ Valeur finale : {compteur['valeur']}")


demo_context_manager_lock()

print("\n‚è±Ô∏è AUTRES CONTEXT MANAGERS BUILT-IN")
print("-" * 35)


def demo_autres_context_managers():
    """D√©monstration d'autres context managers built-in"""
    import tempfile
    import decimal
    import warnings

    print("‚è±Ô∏è Autres context managers int√©gr√©s :")

    # 1. tempfile.TemporaryDirectory
    print("\n   1Ô∏è‚É£ tempfile.TemporaryDirectory :")
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"      R√©pertoire temporaire : {temp_dir}")

        # Cr√©er un fichier dans le r√©pertoire temporaire
        temp_file = os.path.join(temp_dir, "test.txt")
        with open(temp_file, "w") as f:
            f.write("Fichier temporaire")

        print(f"      Fichier cr√©√© : {os.path.exists(temp_file)}")

    print(f"      Apr√®s with - R√©pertoire existe ? {os.path.exists(temp_dir)}")

    # 2. decimal.localcontext
    print("\n   2Ô∏è‚É£ decimal.localcontext :")
    print(f"      Pr√©cision par d√©faut : {decimal.getcontext().prec}")

    with decimal.localcontext() as ctx:
        ctx.prec = 50  # Tr√®s haute pr√©cision
        print(f"      Pr√©cision dans le contexte : {ctx.prec}")

        # Calcul haute pr√©cision
        x = decimal.Decimal(1) / decimal.Decimal(3)
        print(f"      1/3 = {x}")

    print(f"      Pr√©cision apr√®s contexte : {decimal.getcontext().prec}")

    # 3. warnings.catch_warnings
    print("\n   3Ô∏è‚É£ warnings.catch_warnings :")

    def fonction_avec_warning():
        warnings.warn("Ceci est un avertissement", DeprecationWarning)
        return "R√©sultat"

    print("      Sans capture :")
    try:
        resultat = fonction_avec_warning()
        print(f"      R√©sultat : {resultat}")
    except:
        pass

    print("      Avec capture des warnings :")
    with warnings.catch_warnings(record=True) as w:
        warnings.simplefilter("always")
        resultat = fonction_avec_warning()
        print(f"      R√©sultat : {resultat}")
        print(f"      Warnings captur√©s : {len(w)}")
        if w:
            print(f"      Message : {w[0].message}")


demo_autres_context_managers()

print("\n" + "=" * 50)
print("3. CR√âER DES CONTEXT MANAGERS")
print("=" * 50)

print("\nüèóÔ∏è M√âTHODE CLASSE - PROTOCOLE COMPLET")
print("-" * 37)


class GestionnaireFichierAvecLog:
    """Context manager personnalis√© pour fichiers avec logging"""

    def __init__(self, nom_fichier, mode="r", encoding="utf-8", debug=True):
        self.nom_fichier = nom_fichier
        self.mode = mode
        self.encoding = encoding
        self.debug = debug
        self.fichier = None
        self.temps_debut = None

    def __enter__(self):
        """Entr√©e dans le context manager"""
        if self.debug:
            import time
            self.temps_debut = time.time()
            print(
                f"   üìÇ Ouverture de '{self.nom_fichier}' en mode '{self.mode}'")

        try:
            self.fichier = open(self.nom_fichier, self.mode,
                                encoding=self.encoding)
            if self.debug:
                print(f"   ‚úÖ Fichier ouvert avec succ√®s")
            return self.fichier

        except Exception as e:
            if self.debug:
                print(f"   ‚ùå Erreur d'ouverture : {e}")
            raise

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Sortie du context manager"""
        if self.fichier:
            self.fichier.close()

            if self.debug:
                import time
                duree = time.time() - self.temps_debut if self.temps_debut else 0
                print(f"   üîí Fichier ferm√© (ouvert {duree:.3f}s)")

                if exc_type:
                    print(
                        f"   ‚ö†Ô∏è Fermeture apr√®s exception : {exc_type.__name__}: {exc_value}")
                else:
                    print(f"   ‚úÖ Fermeture normale")

        # Retourner False pour propager les exceptions
        # Retourner True pour supprimer les exceptions
        return False


def demo_context_manager_classe():
    """Test du context manager personnalis√©"""

    print("üèóÔ∏è Context manager personnalis√© (classe) :")

    # Cr√©er le r√©pertoire si n√©cessaire
    os.makedirs("context_demo", exist_ok=True)

    # Test normal
    print("\n   Test normal :")
    with GestionnaireFichierAvecLog("context_demo/test_custom.txt", "w") as f:
        f.write("Test du context manager personnalis√©\n")
        f.write("Deuxi√®me ligne\n")

    # Test avec exception
    print("\n   Test avec exception :")
    try:
        with GestionnaireFichierAvecLog("context_demo/test_custom2.txt", "w") as f:
            f.write("D√©but d'√©criture\n")
            raise RuntimeError("Erreur simul√©e dans le context")
    except RuntimeError as e:
        print(f"   üö® Exception captur√©e √† l'ext√©rieur : {e}")


demo_context_manager_classe()

print("\nüé≤ CONTEXT MANAGER AVANC√â - GESTION D'√âTAT")
print("-" * 42)


class GestionnaireEtat:
    """Context manager pour gestion d'√©tat temporaire"""

    def __init__(self, objet, **changements_temporaires):
        self.objet = objet
        self.changements = changements_temporaires
        self.valeurs_originales = {}

    def __enter__(self):
        """Sauvegarder l'√©tat actuel et appliquer les changements"""
        print(f"   üíæ Sauvegarde de l'√©tat actuel")

        # Sauvegarder les valeurs actuelles
        for attribut, nouvelle_valeur in self.changements.items():
            if hasattr(self.objet, attribut):
                self.valeurs_originales[attribut] = getattr(
                    self.objet, attribut)
                print(
                    f"      {attribut}: {self.valeurs_originales[attribut]} -> {nouvelle_valeur}")
            else:
                self.valeurs_originales[attribut] = None
                print(f"      {attribut}: (nouveau) -> {nouvelle_valeur}")

            # Appliquer le changement temporaire
            setattr(self.objet, attribut, nouvelle_valeur)

        return self.objet

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Restaurer l'√©tat original"""
        print(f"   üîÑ Restauration de l'√©tat original")

        for attribut, valeur_originale in self.valeurs_originales.items():
            if valeur_originale is not None:
                setattr(self.objet, attribut, valeur_originale)
                print(f"      {attribut}: restaur√© √† {valeur_originale}")
            else:
                if hasattr(self.objet, attribut):
                    delattr(self.objet, attribut)
                    print(f"      {attribut}: supprim√©")

        return False


class Configuration:
    """Classe de configuration pour la d√©mo"""

    def __init__(self):
        self.debug = False
        self.timeout = 30
        self.host = "localhost"


def demo_gestionnaire_etat():
    """Test du gestionnaire d'√©tat"""

    print("üé≤ Context manager pour gestion d'√©tat :")

    config = Configuration()
    print(f"\n   √âtat initial :")
    print(f"      debug: {config.debug}")
    print(f"      timeout: {config.timeout}")
    print(f"      host: {config.host}")

    # Modifier temporairement la configuration
    print(f"\n   Modification temporaire :")
    with GestionnaireEtat(config, debug=True, timeout=60, env="production") as cfg:
        print(f"      Dans le contexte :")
        print(f"         debug: {cfg.debug}")
        print(f"         timeout: {cfg.timeout}")
        print(f"         host: {cfg.host}")
        print(f"         env: {getattr(cfg, 'env', 'non d√©fini')}")

    print(f"\n   √âtat apr√®s contexte :")
    print(f"      debug: {config.debug}")
    print(f"      timeout: {config.timeout}")
    print(f"      host: {config.host}")
    print(f"      env: {getattr(config, 'env', 'non d√©fini')}")


demo_gestionnaire_etat()

print("\n" + "=" * 50)
print("4. D√âCORATEUR @CONTEXTMANAGER")
print("=" * 50)

print("\nüé® CONTEXTLIB.CONTEXTMANAGER")
print("-" * 29)


@contextmanager
def gestionnaire_simple(nom):
    """Context manager simple avec d√©corateur"""
    print(f"   üöÄ Entr√©e dans le contexte '{nom}'")
    try:
        yield f"Ressource: {nom}"
    finally:
        print(f"   üßπ Sortie du contexte '{nom}'")


@contextmanager
def gestionnaire_fichier_temp(nom_fichier):
    """Context manager pour fichier temporaire"""
    print(f"   üìù Cr√©ation du fichier temporaire '{nom_fichier}'")

    # Setup
    with open(nom_fichier, "w", encoding="utf-8") as f:
        f.write(f"Fichier temporaire cr√©√©\n")

    try:
        # Yield la ressource
        yield nom_fichier
    finally:
        # Cleanup
        if os.path.exists(nom_fichier):
            os.remove(nom_fichier)
            print(f"   üóëÔ∏è Fichier temporaire '{nom_fichier}' supprim√©")


@contextmanager
def chronometre(nom_operation):
    """Context manager pour mesurer le temps d'ex√©cution"""
    import time

    print(f"   ‚è±Ô∏è D√©but de '{nom_operation}'")
    debut = time.time()

    try:
        yield
    finally:
        fin = time.time()
        duree = fin - debut
        print(f"   ‚úÖ '{nom_operation}' termin√© en {duree:.3f}s")


def demo_contextmanager_decorateur():
    """Test des context managers avec d√©corateur"""

    print("üé® Context managers avec @contextmanager :")

    # Test du gestionnaire simple
    print("\n   1Ô∏è‚É£ Gestionnaire simple :")
    with gestionnaire_simple("test") as ressource:
        print(f"      Utilisation de : {ressource}")

    # Test du gestionnaire de fichier temporaire
    print("\n   2Ô∏è‚É£ Fichier temporaire :")
    with gestionnaire_fichier_temp("context_demo/temp.txt") as nom_fichier:
        print(f"      Fichier disponible : {nom_fichier}")
        print(f"      Existe ? {os.path.exists(nom_fichier)}")

        # Utiliser le fichier
        with open(nom_fichier, "a") as f:
            f.write("Contenu ajout√©\n")

    print(
        f"      Apr√®s contexte - Existe ? {os.path.exists('context_demo/temp.txt')}")

    # Test du chronom√®tre
    print("\n   3Ô∏è‚É£ Chronom√®tre :")
    with chronometre("Op√©ration de test"):
        import time
        time.sleep(0.1)  # Simuler du travail
        print(f"      Travail en cours...")


demo_contextmanager_decorateur()

print("\nüîß CONTEXT MANAGER AVEC EXCEPTION HANDLING")
print("-" * 44)


@contextmanager
def gestionnaire_avec_exceptions(nom, supprimer_exceptions=False):
    """Context manager avec gestion d'exceptions"""
    print(f"   üéØ Entr√©e '{nom}'")

    try:
        yield f"Contexte: {nom}"
    except Exception as e:
        print(
            f"   üö® Exception captur√©e dans le contexte : {type(e).__name__}: {e}")

        if supprimer_exceptions:
            print(f"   üîá Exception supprim√©e (pas de propagation)")
            # Ne pas re-raise = supprimer l'exception
        else:
            print(f"   üì§ Exception propag√©e vers l'ext√©rieur")
            raise  # Re-raise l'exception
    finally:
        print(f"   üßπ Nettoyage '{nom}'")


def demo_exceptions_context_manager():
    """Test de la gestion d'exceptions"""

    print("üîß Gestion d'exceptions dans context managers :")

    # Test avec propagation d'exception
    print("\n   1Ô∏è‚É£ Avec propagation d'exception :")
    try:
        with gestionnaire_avec_exceptions("test1", supprimer_exceptions=False):
            print("      Code avant exception")
            raise ValueError("Erreur de test")
            print("      Cette ligne ne sera jamais ex√©cut√©e")
    except ValueError as e:
        print(f"   ‚úÖ Exception re√ßue √† l'ext√©rieur : {e}")

    # Test avec suppression d'exception
    print("\n   2Ô∏è‚É£ Avec suppression d'exception :")
    try:
        with gestionnaire_avec_exceptions("test2", supprimer_exceptions=True):
            print("      Code avant exception")
            raise RuntimeError("Erreur qui sera supprim√©e")
            print("      Cette ligne ne sera jamais ex√©cut√©e")

        print("   ‚úÖ Code apr√®s le contexte (exception supprim√©e)")
    except Exception as e:
        print(f"   ‚ùå Exception non attendue : {e}")


demo_exceptions_context_manager()

print("\n" + "=" * 50)
print("5. CONTEXT MANAGERS IMBRIQU√âS")
print("=" * 50)

print("\nü™Ü IMBRICATION MANUELLE")
print("-" * 21)


def demo_imbrication_manuelle():
    """D√©monstration d'imbrication manuelle"""

    print("ü™Ü Imbrication manuelle de context managers :")

    os.makedirs("context_demo", exist_ok=True)

    with chronometre("Op√©ration compl√®te"):
        with gestionnaire_simple("Niveau 1") as ctx1:
            print(f"      Dans {ctx1}")

            with gestionnaire_fichier_temp("context_demo/nested.txt") as fichier:
                print(f"      Fichier temporaire : {fichier}")

                with open(fichier, "a") as f:
                    print(f"      √âcriture dans le fichier")
                    f.write("Contenu imbriqu√©\n")

                    # Simulation de travail
                    import time
                    time.sleep(0.05)


demo_imbrication_manuelle()

print("\nüîó CONTEXTLIB.EXITSTACK")
print("-" * 24)


def demo_exitstack():
    """D√©monstration d'ExitStack pour gestion dynamique"""

    print("üîó ExitStack pour context managers dynamiques :")

    os.makedirs("context_demo", exist_ok=True)

    fichiers = ["file1.txt", "file2.txt", "file3.txt"]

    print("\n   1Ô∏è‚É£ Ouverture de multiples fichiers :")
    with ExitStack() as stack:
        # Ouvrir plusieurs fichiers dynamiquement
        file_objects = []
        for nom in fichiers:
            chemin = f"context_demo/{nom}"
            f = stack.enter_context(open(chemin, "w", encoding="utf-8"))
            file_objects.append(f)
            print(f"      Ouvert : {nom}")

        # Utiliser tous les fichiers
        for i, f in enumerate(file_objects):
            f.write(f"Contenu du fichier {i+1}\n")
            f.write(f"G√©r√© par ExitStack\n")

        print(f"      √âcriture dans {len(file_objects)} fichiers")

        # Tous les fichiers seront ferm√©s automatiquement

    print(f"   ‚úÖ Tous les fichiers ferm√©s automatiquement")

    # Exemple avec gestion conditionnelle
    print("\n   2Ô∏è‚É£ Gestion conditionnelle :")
    conditions = [True, False, True]

    with ExitStack() as stack:
        contexts = []

        for i, condition in enumerate(conditions):
            if condition:
                ctx = stack.enter_context(
                    gestionnaire_simple(f"Conditionnel-{i+1}"))
                contexts.append(ctx)
                print(f"      Context {i+1} : {ctx}")
            else:
                print(f"      Context {i+1} : ignor√©")

        print(f"   üìä {len(contexts)} contexts actifs")


demo_exitstack()

print("\n‚ö° CONTEXT MANAGERS EN PARALL√àLE")
print("-" * 33)


def demo_context_managers_parallele():
    """Context managers avec threading"""
    import threading
    import time

    print("‚ö° Context managers avec threading :")

    @contextmanager
    def worker_context(worker_id, duree):
        """Context manager pour worker thread"""
        print(f"   üöÄ Worker {worker_id} : d√©marrage")
        debut = time.time()

        try:
            yield worker_id
        finally:
            fin = time.time()
            print(f"   ‚úÖ Worker {worker_id} : termin√© ({fin-debut:.2f}s)")

    def worker_function(worker_id, duree):
        """Fonction worker utilisant le context manager"""
        with worker_context(worker_id, duree):
            print(f"      Worker {worker_id} : travail en cours")
            time.sleep(duree)

    # Lancer plusieurs workers
    threads = []
    durees = [0.1, 0.15, 0.08]

    for i, duree in enumerate(durees):
        thread = threading.Thread(
            target=worker_function,
            args=(i+1, duree)
        )
        threads.append(thread)
        thread.start()

    # Attendre tous les threads
    for thread in threads:
        thread.join()

    print("   üéâ Tous les workers termin√©s")


demo_context_managers_parallele()

print("\n" + "=" * 50)
print("6. PATTERNS AVANC√âS")
print("=" * 50)

print("\nüîÑ CONTEXT MANAGER R√âENTRANT")
print("-" * 30)


class ContextManagerReentrant:
    """Context manager r√©entrant (peut √™tre imbriqu√© avec lui-m√™me)"""

    def __init__(self, nom):
        self.nom = nom
        self.niveau = 0

    def __enter__(self):
        self.niveau += 1
        print(
            f"   {'  ' * (self.niveau-1)}üîΩ Entr√©e '{self.nom}' niveau {self.niveau}")
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        print(
            f"   {'  ' * (self.niveau-1)}üîº Sortie '{self.nom}' niveau {self.niveau}")
        self.niveau -= 1
        return False


def demo_context_manager_reentrant():
    """Test du context manager r√©entrant"""

    print("üîÑ Context manager r√©entrant :")

    cm = ContextManagerReentrant("R√©entrant")

    with cm:
        print("      Dans le niveau 1")

        with cm:
            print("      Dans le niveau 2")

            with cm:
                print("      Dans le niveau 3")

            print("      Retour au niveau 2")

        print("      Retour au niveau 1")


demo_context_manager_reentrant()

print("\nüè≠ FACTORY DE CONTEXT MANAGERS")
print("-" * 32)


class ContextManagerFactory:
    """Factory pour cr√©er diff√©rents types de context managers"""

    @staticmethod
    @contextmanager
    def connexion_db(host, base):
        """Simuler une connexion DB"""
        print(f"   üîó Connexion √† {base} sur {host}")
        connexion = f"connexion_{base}_{host}"
        try:
            yield connexion
        finally:
            print(f"   üîå D√©connexion de {base}")

    @staticmethod
    @contextmanager
    def cache_redis(host, port=6379):
        """Simuler une connexion Redis"""
        print(f"   üì¶ Connexion Redis {host}:{port}")
        cache = f"redis_{host}_{port}"
        try:
            yield cache
        finally:
            print(f"   üì¶ Fermeture Redis")

    @staticmethod
    @contextmanager
    def transaction():
        """Simuler une transaction"""
        print(f"   üí≥ D√©but de transaction")
        transaction_id = "tx_12345"
        try:
            yield transaction_id
            print(f"   ‚úÖ Commit transaction {transaction_id}")
        except Exception as e:
            print(f"   ‚ùå Rollback transaction {transaction_id} : {e}")
            raise

    @classmethod
    def creer_contexte(cls, type_contexte, **kwargs):
        """Factory method pour cr√©er des contextes"""
        if type_contexte == "db":
            return cls.connexion_db(kwargs.get("host", "localhost"),
                                    kwargs.get("base", "mydb"))
        elif type_contexte == "cache":
            return cls.cache_redis(kwargs.get("host", "localhost"),
                                   kwargs.get("port", 6379))
        elif type_contexte == "transaction":
            return cls.transaction()
        else:
            raise ValueError(f"Type de contexte inconnu : {type_contexte}")


def demo_factory_context_managers():
    """Test de la factory de context managers"""

    print("üè≠ Factory de context managers :")

    factory = ContextManagerFactory()

    # Test des diff√©rents types
    types_test = [
        ("db", {"host": "prod-server", "base": "users"}),
        ("cache", {"host": "redis-server", "port": 6380}),
        ("transaction", {})
    ]

    for type_ctx, params in types_test:
        print(f"\n   Test {type_ctx} :")
        try:
            with factory.creer_contexte(type_ctx, **params) as ctx:
                print(f"      Utilisation de : {ctx}")
        except Exception as e:
            print(f"      Erreur : {e}")


demo_factory_context_managers()

print("\nüéõÔ∏è CONTEXT MANAGER CONFIGURABLE")
print("-" * 33)


class ContextManagerConfigurable:
    """Context manager avec configuration flexible"""

    def __init__(self, **config):
        self.config = {
            'debug': False,
            'timeout': 30,
            'retry_count': 3,
            'log_level': 'INFO',
            'cleanup_on_error': True
        }
        self.config.update(config)
        self.resources = []

    def __enter__(self):
        if self.config['debug']:
            print(f"   üîß Configuration : {self.config}")

        # Simuler l'acquisition de ressources
        for i in range(3):
            resource = f"resource_{i}"
            self.resources.append(resource)
            if self.config['debug']:
                print(f"      Ressource acquise : {resource}")

        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        # Nettoyage des ressources
        if exc_type and self.config['cleanup_on_error']:
            print(f"   üßπ Nettoyage d'urgence apr√®s {exc_type.__name__}")

        for resource in reversed(self.resources):
            if self.config['debug']:
                print(f"      Lib√©ration : {resource}")

        self.resources.clear()

        if self.config['debug']:
            print(f"   ‚úÖ Toutes les ressources lib√©r√©es")

        return False


def demo_context_manager_configurable():
    """Test du context manager configurable"""

    print("üéõÔ∏è Context manager configurable :")

    # Configuration normale
    print("\n   1Ô∏è‚É£ Configuration normale :")
    with ContextManagerConfigurable(debug=True, timeout=60) as cm:
        print(f"      Utilisation des ressources : {len(cm.resources)}")

    # Configuration avec erreur
    print("\n   2Ô∏è‚É£ Configuration avec gestion d'erreur :")
    try:
        with ContextManagerConfigurable(debug=True, cleanup_on_error=True) as cm:
            print(f"      Avant erreur : {len(cm.resources)} ressources")
            raise RuntimeError("Erreur de test")
    except RuntimeError as e:
        print(f"   üö® Exception g√©r√©e : {e}")


demo_context_manager_configurable()

print("\n" + "=" * 50)
print("7. ASYNC CONTEXT MANAGERS")
print("=" * 50)

print("\nüöÄ ASYNC/AWAIT CONTEXT MANAGERS")
print("-" * 33)

print("""
üöÄ ASYNC CONTEXT MANAGERS :

Pour les op√©rations asynchrones, Python fournit :
‚Ä¢ __aenter__() : version async de __enter__()
‚Ä¢ __aexit__()  : version async de __exit__()
‚Ä¢ async with   : version async du statement with

üìù EXEMPLE DE STRUCTURE :

class AsyncContextManager:
    async def __aenter__(self):
        # Setup asynchrone
        return self
    
    async def __aexit__(self, exc_type, exc_value, traceback):
        # Cleanup asynchrone
        return False

# Utilisation :
async def main():
    async with AsyncContextManager() as ctx:
        # Code asynchrone
        pass

üí° CAS D'USAGE :
‚Ä¢ Connexions r√©seau (HTTP, WebSocket, DB)
‚Ä¢ Fichiers asynchrones
‚Ä¢ Verrous asynchrones
‚Ä¢ Pools de ressources async
""")

# Exemple simple d'async context manager (structure seulement)


class ExempleAsyncContextManager:
    """Exemple conceptuel d'async context manager"""

    def __init__(self, nom):
        self.nom = nom

    # Version synchrone pour la d√©mo
    def __enter__(self):
        print(f"   üöÄ [Sync] Entr√©e async contexte '{self.nom}'")
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        print(f"   üßπ [Sync] Sortie async contexte '{self.nom}'")
        return False


def demo_concept_async():
    """D√©monstration conceptuelle (version sync)"""

    print("üöÄ Concept d'async context manager (version sync) :")

    with ExempleAsyncContextManager("Demo") as ctx:
        print(f"      Dans le contexte async : {ctx.nom}")


demo_concept_async()

print("\n" + "=" * 50)
print("8. DEBUGGING ET BEST PRACTICES")
print("=" * 50)

print("\nüîç DEBUGGING CONTEXT MANAGERS")
print("-" * 30)


class ContextManagerDebug:
    """Context manager avec debugging int√©gr√©"""

    def __init__(self, nom, debug=True):
        self.nom = nom
        self.debug = debug
        self.entree_reussie = False

    def __enter__(self):
        if self.debug:
            import traceback
            print(f"   üîç [DEBUG] Entr√©e '{self.nom}'")
            print(f"      Stack trace :")
            for ligne in traceback.format_stack()[-3:-1]:  # 2 derniers appels
                print(f"        {ligne.strip()}")

        try:
            # Simuler acquisition de ressource
            ressource = f"ressource_{self.nom}"
            self.entree_reussie = True

            if self.debug:
                print(f"      Ressource acquise : {ressource}")

            return ressource

        except Exception as e:
            if self.debug:
                print(f"   ‚ùå [DEBUG] Erreur dans __enter__ : {e}")
            raise

    def __exit__(self, exc_type, exc_value, exc_traceback):
        if self.debug:
            print(f"   üîç [DEBUG] Sortie '{self.nom}'")
            print(f"      Entr√©e r√©ussie : {self.entree_reussie}")

            if exc_type:
                print(f"      Exception : {exc_type.__name__}: {exc_value}")
                print(
                    f"      Traceback disponible : {exc_traceback is not None}")
            else:
                print(f"      Sortie normale")

        # Cleanup m√™me en cas d'erreur d'entr√©e
        if self.entree_reussie and self.debug:
            print(f"      Nettoyage des ressources")

        return False


def demo_debugging():
    """Test du debugging de context managers"""

    print("üîç Debugging de context managers :")

    # Test normal
    print("\n   1Ô∏è‚É£ Utilisation normale :")
    with ContextManagerDebug("test-normal") as ressource:
        print(f"      Utilisation de : {ressource}")

    # Test avec exception
    print("\n   2Ô∏è‚É£ Avec exception :")
    try:
        with ContextManagerDebug("test-exception") as ressource:
            print(f"      Avant exception : {ressource}")
            raise ValueError("Erreur de test")
    except ValueError as e:
        print(f"   üö® Exception captur√©e : {e}")


demo_debugging()

print("\n‚úÖ BEST PRACTICES")
print("-" * 17)

print("""
‚úÖ MEILLEURES PRATIQUES :

1. üéØ RESPONSABILIT√â UNIQUE :
   ‚Ä¢ Un context manager = une responsabilit√©
   ‚Ä¢ S√©parer acquisition et logique m√©tier
   ‚Ä¢ Noms explicites et descriptifs

2. üõ°Ô∏è ROBUSTESSE :
   ‚Ä¢ Toujours impl√©menter __exit__ correctement
   ‚Ä¢ G√©rer les exceptions dans __enter__ et __exit__
   ‚Ä¢ Nettoyage m√™me si __enter__ √©choue

3. üìù DOCUMENTATION :
   ‚Ä¢ Documenter le comportement en cas d'exception
   ‚Ä¢ Expliquer les ressources g√©r√©es
   ‚Ä¢ Exemples d'utilisation

4. üß™ TESTS :
   ‚Ä¢ Tester les cas normaux ET les exceptions
   ‚Ä¢ V√©rifier la lib√©ration des ressources
   ‚Ä¢ Tests de r√©entrance si applicable

5. ‚ö° PERFORMANCE :
   ‚Ä¢ √âviter le travail lourd dans __enter__/__exit__
   ‚Ä¢ Utiliser des pools pour ressources co√ªteuses
   ‚Ä¢ Async pour op√©rations I/O

‚ùå ANTI-PATTERNS √Ä √âVITER :
‚Ä¢ Ne pas nettoyer en cas d'exception
‚Ä¢ Logique m√©tier dans __enter__/__exit__
‚Ä¢ Suppression silencieuse d'exceptions importantes
‚Ä¢ Context managers non thread-safe sans documentation
‚Ä¢ Acquisition de ressources sans garantie de lib√©ration
""")

print("\n" + "=" * 50)
print("9. EXERCICES PRATIQUES")
print("=" * 50)

print("""
üí™ EXERCICES √Ä IMPL√âMENTER :

üéØ Exercice 1 : Pool de connexions DB
Cr√©ez un context manager pour pool de connexions :
‚Ä¢ Acquisition/lib√©ration automatique de connexions
‚Ä¢ Gestion des timeouts et retry
‚Ä¢ Monitoring des connexions actives
‚Ä¢ Thread-safety et async support
‚Ä¢ Health checks automatiques

üîí Exercice 2 : Gestionnaire de verrous distribu√©s
Cr√©ez un syst√®me de verrous distribu√©s :
‚Ä¢ Verrous Redis/ZooKeeper
‚Ä¢ Timeout et renouvellement automatique
‚Ä¢ D√©tection de deadlocks
‚Ä¢ Monitoring et m√©triques
‚Ä¢ Fallback en cas de panne

üéÆ Exercice 3 : Context manager de test
Cr√©ez un framework de test avec context managers :
‚Ä¢ Setup/teardown automatique
‚Ä¢ Mocks et fixtures temporaires
‚Ä¢ Capture d'output et logs
‚Ä¢ Nettoyage de base de donn√©es
‚Ä¢ G√©n√©ration de rapports

‚ö° Exercice 4 : Gestionnaire de cache intelligent
Cr√©ez un syst√®me de cache avec context managers :
‚Ä¢ Cache multi-niveaux (m√©moire, Redis, disque)
‚Ä¢ Invalidation intelligente
‚Ä¢ Compression et s√©rialisation
‚Ä¢ M√©triques de performance
‚Ä¢ Warmup automatique

üåê Exercice 5 : Context manager r√©seau
Cr√©ez un gestionnaire pour op√©rations r√©seau :
‚Ä¢ Pool de connexions HTTP/WebSocket
‚Ä¢ Circuit breaker et retry
‚Ä¢ Monitoring latence et erreurs
‚Ä¢ Load balancing
‚Ä¢ Graceful shutdown
""")

print("\n" + "=" * 50)
print("10. R√âSUM√â FINAL")
print("=" * 50)

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üèóÔ∏è PROTOCOLE CONTEXT MANAGER :
   ‚Ä¢ __enter__() : setup, retourne la ressource
   ‚Ä¢ __exit__() : cleanup, re√ßoit info d'exception
   ‚Ä¢ Garantit l'ex√©cution du cleanup m√™me si exception
   ‚Ä¢ Base du pattern RAII en Python

2. üé≠ STATEMENT WITH :
   ‚Ä¢ with obj as var: syntaxe claire et s√ªre
   ‚Ä¢ √âquivaut √† try/finally mais plus lisible
   ‚Ä¢ Support de l'imbrication et des multiples ressources
   ‚Ä¢ Gestion automatique des exceptions

3. üé® CR√âATION DE CONTEXT MANAGERS :
   ‚Ä¢ Classe avec __enter__/__exit__ : contr√¥le total
   ‚Ä¢ @contextmanager : plus simple avec yield
   ‚Ä¢ ExitStack : gestion dynamique de multiples contexts
   ‚Ä¢ Personnalisation selon les besoins

4. üîí GESTION DES RESSOURCES :
   ‚Ä¢ Fichiers, connexions DB, verrous, sockets
   ‚Ä¢ Acquisition fiable et lib√©ration garantie
   ‚Ä¢ Thread-safety si n√©cessaire
   ‚Ä¢ Gestion des timeouts et erreurs

5. ‚ö° PATTERNS AVANC√âS :
   ‚Ä¢ Context managers r√©entrants
   ‚Ä¢ Factories et configuration
   ‚Ä¢ Imbrication et parall√©lisme
   ‚Ä¢ Async context managers (__aenter__/__aexit__)

üí° BONNES PRATIQUES :
‚úÖ Toujours utiliser with pour les ressources
‚úÖ Impl√©menter __exit__ m√™me si pas d'exception
‚úÖ Documenter le comportement en cas d'erreur
‚úÖ Tester les cas normaux ET exceptionnels
‚úÖ Responsabilit√© unique par context manager
‚úÖ Noms explicites et descriptifs

üö® ERREURS COURANTES :
‚ùå Oublier de lib√©rer les ressources en cas d'exception
‚ùå Logique m√©tier dans __enter__/__exit__
‚ùå Suppression d'exceptions sans justification
‚ùå Context managers non thread-safe
‚ùå Acquisition sans garantie de lib√©ration
‚ùå Ressources partag√©es sans synchronisation

‚ö° CAS D'USAGE COURANTS :
‚Ä¢ Gestion de fichiers et I/O
‚Ä¢ Connexions base de donn√©es
‚Ä¢ Verrous et synchronisation
‚Ä¢ Sessions et authentification  
‚Ä¢ Transactions et rollback
‚Ä¢ Monitoring et profiling

üîß OUTILS ET EXTENSIONS :
‚Ä¢ contextlib : d√©corateurs et utilitaires
‚Ä¢ ExitStack : gestion dynamique
‚Ä¢ asyncio : context managers asynchrones
‚Ä¢ Biblioth√®ques tierces avec support contextuel
‚Ä¢ Frameworks utilisant le pattern

üéØ ARCHITECTURE ROBUSTE :
‚Ä¢ S√©paration des responsabilit√©s
‚Ä¢ Gestion centralis√©e des ressources
‚Ä¢ Monitoring et observabilit√©
‚Ä¢ Graceful degradation
‚Ä¢ Recovery automatique

üéâ F√©licitations ! Context managers ma√Ætris√©s !
üí° Prochaine √©tape : Gestion d'erreurs avanc√©e !
üìö Ressources sous contr√¥le, g√©rez les erreurs !
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE - CONTEXT MANAGERS MA√éTRIS√âS !")
print("=" * 70)
