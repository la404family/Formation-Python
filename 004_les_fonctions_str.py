"""
======================================================================
LES FONCTIONS DE CHA√éNES DE CARACT√àRES - GUIDE COMPLET
======================================================================

üìù Les cha√Ænes de caract√®res (strings) sont l'un des types les plus utilis√©s
en Python. Ce guide vous apprend toutes les techniques pour les manipuler
efficacement : nettoyer, transformer, rechercher, diviser, et bien plus !

"""

print("=" * 70)
print("LES FONCTIONS DE CHA√éNES DE CARACT√àRES - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. CONCEPT DE BASE : QU'EST-CE QU'UNE CHA√éNE ?")
print("=" * 50)

# üìù Les fonctions de manipulation de cha√Ænes de caract√®res
chaines_de_caracteres = "Bonjour, je suis une cha√Æne de caract√®res."
print(f"üìù Cha√Æne d'exemple : '{chaines_de_caracteres}'")

print("\nüí° ANALOGIE - Une cha√Æne comme une ligne de texte :")
print("""
    B o n j o u r ,   j e   s u i s . . .
    0 1 2 3 4 5 6 7 8 9 ...
    
    Chaque caract√®re a une position (index) et peut √™tre manipul√© !
""")

print("\nüîç INFORMATIONS DE BASE :")
# Afficher la longueur de la cha√Æne
longueur = len(chaines_de_caracteres)
print(f"   Longueur totale : {longueur} caract√®res")
print(f"   Type de donn√©e : {type(chaines_de_caracteres)}")
print(f"   Premier caract√®re : '{chaines_de_caracteres[0]}'")
print(f"   Dernier caract√®re : '{chaines_de_caracteres[-1]}'")

print("\n" + "=" * 50)
print("2. TRANSFORMATIONS DE CASSE (MAJUSCULES/MINUSCULES)")
print("=" * 50)

print("\nüî§ CHANGEMENT DE CASSE")
print("-" * 25)

# Convertir la cha√Æne en majuscules
chaine_majuscule = chaines_de_caracteres.upper()
print(f"‚úÖ upper() - Tout en MAJUSCULES :")
print(f"   '{chaines_de_caracteres}' ‚Üí '{chaine_majuscule}'")

# Convertir la cha√Æne en minuscules
chaine_minuscule = chaines_de_caracteres.lower()
print(f"‚úÖ lower() - Tout en minuscules :")
print(f"   '{chaines_de_caracteres}' ‚Üí '{chaine_minuscule}'")
# Autres transformations de casse
texte_exemple = "python EST un langage FORMIDABLE"
print(f"‚úÖ capitalize() - Premi√®re lettre en majuscule :")
print(f"   '{texte_exemple}' ‚Üí '{texte_exemple.capitalize()}'")

print(f"‚úÖ title() - Premi√®re lettre de chaque mot :")
print(f"   '{texte_exemple}' ‚Üí '{texte_exemple.title()}'")

print(f"‚úÖ swapcase() - Inverse majuscules/minuscules :")
print(f"   '{texte_exemple}' ‚Üí '{texte_exemple.swapcase()}'")

print("\nüí° USAGE PRATIQUE :")
nom_utilisateur = "JEAN dupont"
nom_formate = nom_utilisateur.title()
print(f"   Nom utilisateur format√© : '{nom_formate}'")

print("\n" + "=" * 50)
print("3. REMPLACEMENT ET SUBSTITUTION")
print("=" * 50)

print("\nüîÑ REMPLACER DU TEXTE")
print("-" * 20)

# Remplacer une sous-cha√Æne par une autre
chaine_remplacee = chaines_de_caracteres.replace("cha√Æne", "ligne")
print(f"‚úÖ replace() - Remplacement simple :")
print(f"   Original : '{chaines_de_caracteres}'")
print(f"   R√©sultat : '{chaine_remplacee}'")

# Remplacement avec limite
texte_multiple = "Python Python Python est formidable"
remplacement_limite = texte_multiple.replace("Python", "Java", 2)
print(f"‚úÖ replace() avec limite (2 remplacements max) :")
print(f"   Original : '{texte_multiple}'")
print(f"   R√©sultat : '{remplacement_limite}'")

print("\nüí° USAGE PRATIQUE - Nettoyage de donn√©es :")
texte_sale = "Email@@domain..com"
texte_propre = texte_sale.replace("@@", "@").replace("..", ".")
print(f"   Nettoyage email : '{texte_sale}' ‚Üí '{texte_propre}'")

print("\n" + "=" * 50)
print("4. NETTOYAGE DES ESPACES ET CARACT√àRES")
print("=" * 50)

print("\nüßπ SUPPRIMER LES ESPACES")
print("-" * 25)

# Exemple avec des espaces
texte_avec_espaces = "   Python est g√©nial   "
print(f"Texte avec espaces : '{texte_avec_espaces}'")

# Supprimer les espaces au d√©but et √† la fin de la cha√Æne
chaine_espaces_supprimes = texte_avec_espaces.strip()
print(f"‚úÖ strip() - Supprime espaces d√©but ET fin :")
print(f"   R√©sultat : '{chaine_espaces_supprimes}'")

# Supprimer les espaces au d√©but de la cha√Æne
chaine_espaces_debut = texte_avec_espaces.lstrip()
print(f"‚úÖ lstrip() - Supprime espaces √† GAUCHE :")
print(f"   R√©sultat : '{chaine_espaces_debut}'")

# Supprimer les espaces √† la fin de la cha√Æne
chaine_espaces_fin = texte_avec_espaces.rstrip()
print(f"‚úÖ rstrip() - Supprime espaces √† DROITE :")
print(f"   R√©sultat : '{chaine_espaces_fin}'")

print("\nüéØ SUPPRIMER CARACT√àRES SP√âCIFIQUES")
print("-" * 35)

# Supprimer des caract√®res sp√©cifiques au d√©but et √† la fin de la cha√Æne
texte_ponctuation = "...!!!Python est top!!!..."
chaine_caracteres_specifiques = texte_ponctuation.strip(".!")
print(f"‚úÖ strip() avec caract√®res sp√©cifiques :")
print(f"   Original : '{texte_ponctuation}'")
print(f"   R√©sultat : '{chaine_caracteres_specifiques}'")

print("\nüí° USAGE PRATIQUE - Nettoyage input utilisateur :")
saisie_utilisateur = "  Jean Dupont  "
saisie_propre = saisie_utilisateur.strip().title()
print(f"   Saisie brute : '{saisie_utilisateur}'")
print(f"   Saisie nettoy√©e : '{saisie_propre}'")
print("\n" + "=" * 50)
print("5. DIVISER ET JOINDRE DES CHA√éNES")
print("=" * 50)

print("\n‚úÇÔ∏è DIVISER UNE CHA√éNE - split()")
print("-" * 30)

# Diviser la cha√Æne en une liste de mots
phrase = "Python est un langage formidable"
liste_de_mots = phrase.split()
print(f"‚úÖ split() - Division par espaces (d√©faut) :")
print(f"   Phrase : '{phrase}'")
print(f"   Mots : {liste_de_mots}")

# Division avec s√©parateur personnalis√©
email = "jean.dupont@email.com"
parties_email = email.split("@")
print(f"‚úÖ split('@') - Division par @ :")
print(f"   Email : '{email}'")
print(f"   Parties : {parties_email}")

# Division avec limite
texte_csv = "nom,prenom,age,ville,pays"
colonnes = texte_csv.split(",", 2)  # Maximum 2 divisions
print(f"‚úÖ split(',', 2) - Division limit√©e :")
print(f"   CSV : '{texte_csv}'")
print(f"   R√©sultat : {colonnes}")

print("\nüîó JOINDRE UNE LISTE - join()")
print("-" * 25)

# Joindre une liste de mots en une cha√Æne
liste_de_mots = ["Bonjour", "je", "suis", "une", "cha√Æne", "de", "caract√®res"]
chaine_jointe = " ".join(liste_de_mots)
print(f"‚úÖ ' '.join() - Joindre avec espaces :")
print(f"   Liste : {liste_de_mots}")
print(f"   Cha√Æne : '{chaine_jointe}'")

# Joindre avec diff√©rents s√©parateurs
mots = ["Python", "Java", "JavaScript", "C++"]
langages_virgule = ", ".join(mots)
langages_tiret = " - ".join(mots)
print(f"‚úÖ Joindre avec diff√©rents s√©parateurs :")
print(f"   Avec virgules : '{langages_virgule}'")
print(f"   Avec tirets : '{langages_tiret}'")

print("\nüí° USAGE PRATIQUE - Traitement de fichiers CSV :")
ligne_csv = "Jean,Dupont,30,Paris"
donnees = ligne_csv.split(",")
print(f"   Ligne CSV : '{ligne_csv}'")
print(f"   Donn√©es extraites : {donnees}")
nouvelle_ligne = ";".join(donnees)
print(f"   Nouveau format : '{nouvelle_ligne}'")

print("\n" + "=" * 50)
print("6. RECHERCHE ET V√âRIFICATION")
print("=" * 50)

print("\nüîç V√âRIFIER LA PR√âSENCE D'UN TEXTE")
print("-" * 35)

texte_recherche = "Python est un excellent langage de programmation"

# V√©rifier si une sous-cha√Æne est pr√©sente dans la cha√Æne
sous_chaine = "Python"
est_present = sous_chaine in texte_recherche
print(f"‚úÖ Op√©rateur 'in' - Pr√©sence d'un mot :")
print(f"   '{sous_chaine}' dans '{texte_recherche}' : {est_present}")

sous_chaine_absente = "Java"
est_absent = sous_chaine_absente not in texte_recherche
print(f"‚úÖ Op√©rateur 'not in' - Absence d'un mot :")
print(f"   '{sous_chaine_absente}' PAS dans le texte : {est_absent}")

print("\nüìç TROUVER LA POSITION - find() et index()")
print("-" * 40)

# Trouver la position d'une sous-cha√Æne dans la cha√Æne
position = texte_recherche.find("excellent")
print(f"‚úÖ find() - Position de 'excellent' : {position}")

position_inexistant = texte_recherche.find("Java")
print(f"‚úÖ find() - Mot inexistant : {position_inexistant} (retourne -1)")

# Recherche depuis la fin
position_fin = texte_recherche.rfind("e")
print(f"‚úÖ rfind() - Dernier 'e' √† la position : {position_fin}")

print("\nüéØ V√âRIFIER D√âBUT ET FIN - startswith() / endswith()")
print("-" * 50)

# V√©rifier si la cha√Æne commence par une sous-cha√Æne
commence_par = texte_recherche.startswith("Python")
print(f"‚úÖ startswith('Python') : {commence_par}")

# V√©rifier si la cha√Æne se termine par une sous-cha√Æne
se_termine_par = texte_recherche.endswith("programmation")
print(f"‚úÖ endswith('programmation') : {se_termine_par}")

# V√©rification multiple
extensions_valides = (".py", ".pyw", ".pyc")
fichier = "mon_script.py"
est_python = fichier.endswith(extensions_valides)
print(f"‚úÖ V√©rification multiple - '{fichier}' est Python : {est_python}")

print("\nüìä COMPTER LES OCCURRENCES - count()")
print("-" * 35)

texte_count = "Python Python Python est partout en Python"
# Compter le nombre d'occurrences d'une sous-cha√Æne
nombre_python = texte_count.count("Python")
print(f"‚úÖ count('Python') dans '{texte_count}' : {nombre_python} fois")

nombre_voyelles = texte_count.lower().count("a") + texte_count.lower().count("e") + \
    texte_count.lower().count("i") + texte_count.lower().count("o") + \
    texte_count.lower().count("u")
print(f"‚úÖ Nombre total de voyelles : {nombre_voyelles}")
print("\n" + "=" * 50)
print("7. V√âRIFICATIONS DE TYPE ET CONTENU")
print("=" * 50)

print("\nüî¢ V√âRIFICATIONS NUM√âRIQUES")
print("-" * 28)

# Tests avec diff√©rents types de cha√Ænes
exemples_numeriques = ["123", "12.5", "abc", "123abc", "  ", ""]

for exemple in exemples_numeriques:
    if exemple:  # Si la cha√Æne n'est pas vide
        print(f"\nüìù Analyse de : '{exemple}'")
        # V√©rifier si la cha√Æne est num√©rique
        est_numerique = exemple.isnumeric()
        print(f"   ‚úÖ isnumeric() : {est_numerique}")

        # V√©rifier si la cha√Æne ne contient que des chiffres
        est_digit = exemple.isdigit()
        print(f"   ‚úÖ isdigit() : {est_digit}")

        # V√©rifier si la cha√Æne peut √™tre convertie en nombre
        try:
            float(exemple)
            peut_etre_nombre = True
        except:
            peut_etre_nombre = False
        print(f"   ‚úÖ Peut √™tre converti en nombre : {peut_etre_nombre}")

print("\nüî§ V√âRIFICATIONS ALPHAB√âTIQUES")
print("-" * 30)

exemples_alpha = ["Python", "Python3", "HELLO", "hello", "Hello World", "123"]

for exemple in exemples_alpha:
    print(f"\nüìù Analyse de : '{exemple}'")
    # V√©rifier si la cha√Æne est alphab√©tique
    est_alphabetique = exemple.isalpha()
    print(f"   ‚úÖ isalpha() (que des lettres) : {est_alphabetique}")

    # V√©rifier si la cha√Æne est alphanum√©rique
    est_alphanumerique = exemple.isalnum()
    print(f"   ‚úÖ isalnum() (lettres + chiffres) : {est_alphanumerique}")

    # V√©rifier si la cha√Æne est en majuscules
    est_en_majuscules = exemple.isupper()
    print(f"   ‚úÖ isupper() (tout en majuscules) : {est_en_majuscules}")

    # V√©rifier si la cha√Æne est en minuscules
    est_en_minuscules = exemple.islower()
    print(f"   ‚úÖ islower() (tout en minuscules) : {est_en_minuscules}")

print("\nüéØ V√âRIFICATIONS SP√âCIALES")
print("-" * 25)

exemples_speciaux = ["   ", "", "mon_variable",
                     "class", "2variable", "_private"]

for exemple in exemples_speciaux:
    print(f"\nüìù Analyse de : '{exemple}' (longueur: {len(exemple)})")

    # V√©rifier si la cha√Æne est un espace
    est_espace = exemple.isspace()
    print(f"   ‚úÖ isspace() (que des espaces) : {est_espace}")

    # V√©rifier si la cha√Æne est vide
    est_vide = not exemple
    print(f"   ‚úÖ Cha√Æne vide : {est_vide}")

    if exemple.strip():  # Si pas vide apr√®s nettoyage
        # V√©rifier si la cha√Æne est un identifiant Python valide
        est_identifiant = exemple.isidentifier()
        print(f"   ‚úÖ isidentifier() (nom variable valide) : {est_identifiant}")

print("\n" + "=" * 50)
print("8. FORMATAGE ET ALIGNEMENT")
print("=" * 50)

print("\nüìê FORMATAGE DE LARGEUR")
print("-" * 25)

mot = "Python"
largeur = 20

print(f"‚úÖ center() - Centrer sur {largeur} caract√®res :")
resultat_center = mot.center(largeur, "-")
print(f"   '{resultat_center}'")

print(f"‚úÖ ljust() - Aligner √† gauche :")
resultat_ljust = mot.ljust(largeur, ".")
print(f"   '{resultat_ljust}'")

print(f"‚úÖ rjust() - Aligner √† droite :")
resultat_rjust = mot.rjust(largeur, "*")
print(f"   '{resultat_rjust}'")

print(f"‚úÖ zfill() - Remplir avec des z√©ros :")
nombre = "42"
resultat_zfill = nombre.zfill(8)
print(f"   '{nombre}' ‚Üí '{resultat_zfill}'")

print("\nüí° USAGE PRATIQUE - Tableau format√© :")
noms = ["Alice", "Bob", "Charlotte"]
ages = [25, 30, 28]
print(f"{'Nom':<12} {'Age':>5}")
print("-" * 17)
for nom, age in zip(noms, ages):
    print(f"{nom:<12} {age:>5}")

print("\n" + "=" * 50)
print("9. TECHNIQUES AVANC√âES")
print("=" * 50)

print("\nüé® ENCODAGE ET CARACT√àRES SP√âCIAUX")
print("-" * 35)

# Gestion des caract√®res sp√©ciaux
texte_accents = "Caf√©, na√Øvet√©, co√Øncidence"
print(f"‚úÖ Texte avec accents : '{texte_accents}'")
print(f"   Longueur : {len(texte_accents)} caract√®res")
print(f"   encode('utf-8') : {texte_accents.encode('utf-8')}")

# Normalisation des caract√®res
texte_avec_espaces = "Python    est    g√©nial"
texte_normalise = " ".join(texte_avec_espaces.split())
print(f"‚úÖ Normalisation des espaces multiples :")
print(f"   Avant : '{texte_avec_espaces}'")
print(f"   Apr√®s : '{texte_normalise}'")

print("\nüîÑ M√âTHODES CHA√éN√âES")
print("-" * 20)

texte_brut = "  PYTHON est UN langage FORMIDABLE  "
resultat_chaine = texte_brut.strip().lower().title().replace("Un", "un excellent")
print(f"‚úÖ Cha√Ænage de m√©thodes :")
print(f"   Original : '{texte_brut}'")
print(f"   R√©sultat : '{resultat_chaine}'")

print("\nüéØ VALIDATION DE DONN√âES")
print("-" * 25)


def valider_email(email):
    """Validation simple d'email"""
    email = email.strip().lower()
    return "@" in email and "." in email and not email.startswith("@") and not email.endswith("@")


def valider_telephone(tel):
    """Validation simple de t√©l√©phone"""
    tel_propre = tel.replace(" ", "").replace("-", "").replace(".", "")
    return tel_propre.isdigit() and 10 <= len(tel_propre) <= 15


# Tests de validation
emails_test = ["jean@email.com", "invalid-email", "@test.com", "test@"]
telephones_test = ["06.12.34.56.78", "0123456789", "abc123", "123"]

print("Tests d'emails :")
for email in emails_test:
    valide = valider_email(email)
    print(f"   '{email}' : {'‚úÖ Valide' if valide else '‚ùå Invalide'}")

print("Tests de t√©l√©phones :")
for tel in telephones_test:
    valide = valider_telephone(tel)
    print(f"   '{tel}' : {'‚úÖ Valide' if valide else '‚ùå Invalide'}")

print("\n" + "=" * 50)
print("11. TABLEAU R√âCAPITULATIF DES M√âTHODES")
print("=" * 50)

print("""
üìä GUIDE DE R√âF√âRENCE RAPIDE

üî§ TRANSFORMATION :
   ‚Ä¢ upper() / lower() / title() / capitalize()
   ‚Ä¢ swapcase() - Inverse maj/min
   ‚Ä¢ strip() / lstrip() / rstrip() - Supprime espaces
   ‚Ä¢ replace(ancien, nouveau) - Remplace texte

‚úÇÔ∏è DIVISION/JOINTURE :
   ‚Ä¢ split(s√©parateur) - Divise en liste
   ‚Ä¢ join(liste) - Joint liste en cha√Æne
   ‚Ä¢ partition() / rpartition() - Divise en 3 parties

üîç RECHERCHE :
   ‚Ä¢ find() / rfind() - Position (retourne -1 si absent)
   ‚Ä¢ index() / rindex() - Position (erreur si absent)
   ‚Ä¢ count() - Nombre d'occurrences
   ‚Ä¢ in / not in - Pr√©sence/absence

‚úÖ V√âRIFICATIONS :
   ‚Ä¢ startswith() / endswith() - D√©but/fin
   ‚Ä¢ isalpha() / isdigit() / isalnum() - Type de caract√®res
   ‚Ä¢ isupper() / islower() - Casse
   ‚Ä¢ isspace() / isidentifier() - Caract√®res sp√©ciaux

üìê FORMATAGE :
   ‚Ä¢ center() / ljust() / rjust() - Alignement
   ‚Ä¢ zfill() - Remplissage avec z√©ros
   ‚Ä¢ format() / f-string - Formatage moderne
""")

print("\n" + "=" * 50)
print("12. R√âSUM√â FINAL")
print("=" * 50)

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üìù CHA√éNES = S√âQUENCES IMMUTABLES :
   ‚Ä¢ Chaque m√©thode retourne une NOUVELLE cha√Æne
   ‚Ä¢ L'original n'est jamais modifi√©
   ‚Ä¢ Pensez √† stocker le r√©sultat : texte = texte.upper()

2. üîç RECHERCHE ET V√âRIFICATION :
   ‚Ä¢ 'in' pour v√©rifier la pr√©sence
   ‚Ä¢ find() vs index() (erreur ou -1)
   ‚Ä¢ startswith() / endswith() pour d√©but/fin

3. üßπ NETTOYAGE ESSENTIEL :
   ‚Ä¢ strip() pour nettoyer les saisies utilisateur
   ‚Ä¢ replace() pour corriger les donn√©es
   ‚Ä¢ split() / join() pour restructurer

4. ‚úÖ VALIDATION DE DONN√âES :
   ‚Ä¢ isdigit() / isnumeric() pour les nombres
   ‚Ä¢ isalpha() / isalnum() pour le contenu
   ‚Ä¢ isidentifier() pour les noms de variables

5. üé® FORMATAGE PROFESSIONNEL :
   ‚Ä¢ F-strings pour l'affichage moderne
   ‚Ä¢ center() / ljust() / rjust() pour l'alignement
   ‚Ä¢ M√©thodes cha√Æn√©es pour plus d'efficacit√©

üí° FORMULE MAGIQUE pour traiter les cha√Ænes :
   Nettoyer ‚Üí Transformer ‚Üí Valider ‚Üí Formater

üéâ F√©licitations ! Vous ma√Ætrisez les cha√Ænes Python !
üí° Prochaine √©tape : Les nombres et calculs !
üìö Continuez avec 005_les_fonctions_int.py
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE")
print("=" * 70)
