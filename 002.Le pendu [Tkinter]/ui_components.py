"""
Module contenant les composants de l'interface utilisateur pour le jeu du pendu.
Ce module utilise tkinter pour cr√©er une interface graphique compl√®te.

Fonctionnalit√©s :
- Interface graphique intuitive avec feedback visuel
- Gestion √©v√©nementielle robuste
- Couleurs contextuelles selon l'√©tat du jeu
- Validation compl√®te des saisies
- Focus automatique et UX optimis√©e
"""

import tkinter as tk
from tkinter import messagebox, font
from game_logic import GameManager
from data_manager import DataManager


# =============================================================================
# 4.2 GESTION DES COULEURS CONTEXTUELLES
# =============================================================================
class CouleursPendu:
    """
    Classe contenant toutes les constantes de couleurs pour le jeu du pendu.
    Cela permet de centraliser et de modifier facilement les couleurs.
    """

    # Couleurs principales de l'interface
    FOND_PRINCIPAL = "#2E8B57"      # Vert mer (fond de la fen√™tre)
    FOND_PANNEAUX = "#4682B4"       # Bleu acier (panneaux)
    FOND_PENDU = "#F0F8FF"          # Bleu Alice (zone ASCII art)
    TEXTE_PENDU = "#000080"         # Bleu marine (dessin du pendu)

    # Couleurs contextuelles selon l'√©tat du jeu
    TEXTE_NORMAL = "white"          # Blanc (texte normal)
    TEXTE_SUCCES = "#32CD32"        # Vert lime (succ√®s, victoire)
    TEXTE_ERREUR = "#FF6B6B"        # Rouge clair (erreurs)
    TEXTE_AVERTISSEMENT = "#FFD93D"  # Jaune (avertissements)
    TEXTE_INFO = "#87CEEB"          # Bleu ciel (informations)
    TEXTE_DEFAITE = "#DC143C"       # Rouge cramoisi (d√©faite)

    # Couleurs des boutons
    BOUTON_NOUVEAU = "#32CD32"      # Vert lime (nouvelle partie)
    BOUTON_QUITTER = "#DC143C"      # Rouge cramoisi (quitter)

    # Couleurs des lettres essay√©es
    LETTRES_CORRECTES = "#90EE90"   # Vert clair
    LETTRES_INCORRECTES = "#FFA07A"  # Saumon clair


class PenduUI(tk.Tk):
    """
    Classe principale de l'interface utilisateur du jeu du pendu.
    H√©rite de tk.Tk pour cr√©er la fen√™tre principale.
    """

    def __init__(self):
        """
        Initialise l'interface utilisateur du jeu du pendu.
        Configure la fen√™tre et tous les composants graphiques.

        4.1 CONNEXION UI ‚Üî LOGIQUE
        Cette m√©thode √©tablit la connexion entre l'interface et la logique du jeu.
        """
        # Appelle le constructeur de la classe parent (tk.Tk)
        super().__init__()

        # =============================================================================
        # 4.1 INSTANCIATION DES GESTIONNAIRES
        # =============================================================================

        # 1. Instancier le gestionnaire de donn√©es
        # Le DataManager s'occupe du chargement des mots et des statistiques
        print("üîß Initialisation du gestionnaire de donn√©es...")
        self.data_manager = DataManager()

        # 2. Instancier le gestionnaire de jeu en lui passant le data_manager
        # Le GameManager utilise le DataManager pour acc√©der aux mots et stats
        print("üéÆ Initialisation du gestionnaire de jeu...")
        self.game_manager = GameManager()

        # 3. Variable pour contr√¥ler l'√©tat de la saisie
        # Permet de d√©sactiver la saisie pendant les fins de partie
        self.saisie_active = True

        # 4. Configuration initiale de la fen√™tre
        print("üñºÔ∏è Configuration de la fen√™tre...")
        self.configurer_fenetre()

        # 5. Cr√©ation des composants d'interface
        print("üé® Cr√©ation de l'interface...")
        self.creer_interface()

        # 6. Charger et afficher les statistiques initiales
        print("üìä Chargement des statistiques...")
        self.charger_et_afficher_statistiques()

        # 7. D√©marre une nouvelle partie
        print("üöÄ D√©marrage d'une nouvelle partie...")
        self.nouvelle_partie()

        print("‚úÖ Interface initialis√©e avec succ√®s !")

    def charger_et_afficher_statistiques(self):
        """
        Charge les statistiques depuis le fichier et les affiche.
        Cette m√©thode est appel√©e lors de l'initialisation.
        """
        try:
            # Charge les statistiques via le data_manager
            self.data_manager.charger_stats()

            # Met √† jour l'affichage des statistiques
            self.mettre_a_jour_statistiques()

            print("‚úÖ Statistiques charg√©es et affich√©es")

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement des statistiques : {e}")
            # En cas d'erreur, on continue avec des stats par d√©faut

    def configurer_fenetre(self):
        """
        Configure les propri√©t√©s de la fen√™tre principale.
        Utilise les constantes de couleurs pour une gestion centralis√©e.
        """
        # Titre de la fen√™tre avec √©mojis pour un aspect ludique
        self.title("üéØ Jeu du Pendu üéØ")

        # Taille optimale de la fen√™tre (largeur x hauteur)
        self.geometry("800x700")

        # Couleur de fond utilisant les constantes de couleurs
        self.configure(bg=CouleursPendu.FOND_PRINCIPAL)

        # Configuration pour le redimensionnement
        # Configure les lignes et colonnes pour qu'elles s'√©tendent
        self.grid_rowconfigure(0, weight=1)    # Frame du pendu
        self.grid_rowconfigure(1, weight=1)    # Frame centrale
        self.grid_rowconfigure(2, weight=0)    # Frame de saisie (taille fixe)
        self.grid_columnconfigure(0, weight=1)  # Colonne principale

        # Emp√™che le redimensionnement manuel (optionnel)
        self.resizable(True, True)

        # Ic√¥ne de la fen√™tre (si le fichier existe)
        try:
            self.iconbitmap("icon.ico")
        except:
            pass  # Ignore si l'ic√¥ne n'existe pas

    def creer_interface(self):
        """
        Cr√©e tous les composants de l'interface utilisateur.
        Organise l'interface en trois zones principales.
        """
        # =============================================================================
        # FRAME 1 : ZONE ASCII ART DU PENDU (en haut)
        # =============================================================================
        self.frame_pendu = tk.Frame(
            self, bg=CouleursPendu.FOND_PRINCIPAL, relief=tk.RAISED, bd=2)
        self.frame_pendu.grid(row=0, column=0, sticky="nsew", padx=10, pady=5)

        # Configure le frame pour le redimensionnement
        self.frame_pendu.grid_rowconfigure(0, weight=1)
        self.frame_pendu.grid_columnconfigure(0, weight=1)

        # Zone d'affichage du pendu (Text widget en lecture seule)
        self.text_pendu = tk.Text(
            self.frame_pendu,
            width=25,
            height=10,
            # Police monospace pour l'ASCII art
            font=("Courier New", 12, "bold"),
            bg=CouleursPendu.FOND_PENDU,    # Utilise les constantes de couleurs
            fg=CouleursPendu.TEXTE_PENDU,   # Utilise les constantes de couleurs
            state=tk.DISABLED,  # Lecture seule
            wrap=tk.NONE,       # Pas de retour √† la ligne automatique
            relief=tk.SUNKEN,
            bd=3
        )
        self.text_pendu.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        # =============================================================================
        # FRAME 2 : ZONE CENTRALE (mot √† deviner + informations)
        # =============================================================================
        self.frame_central = tk.Frame(
            self, bg=CouleursPendu.FOND_PRINCIPAL, relief=tk.RAISED, bd=2)
        self.frame_central.grid(
            row=1, column=0, sticky="nsew", padx=10, pady=5)

        # Configure le frame central
        self.frame_central.grid_rowconfigure(0, weight=1)  # Mot √† deviner
        self.frame_central.grid_rowconfigure(1, weight=1)  # Lettres essay√©es
        self.frame_central.grid_rowconfigure(2, weight=1)  # Messages
        self.frame_central.grid_rowconfigure(3, weight=2)  # Statistiques
        self.frame_central.grid_columnconfigure(0, weight=1)

        # --- Mot √† deviner ---
        self.label_mot = tk.Label(
            self.frame_central,
            text="_ _ _ _ _",
            font=("Arial", 24, "bold"),
            bg=CouleursPendu.FOND_PRINCIPAL,
            fg=CouleursPendu.TEXTE_NORMAL,
            pady=10
        )
        self.label_mot.grid(row=0, column=0, sticky="ew", padx=10, pady=5)

        # --- Lettres essay√©es ---
        self.label_lettres = tk.Label(
            self.frame_central,
            text="Lettres essay√©es : Aucune",
            font=("Arial", 12),
            bg=CouleursPendu.FOND_PRINCIPAL,
            fg=CouleursPendu.TEXTE_INFO,  # Utilise les constantes
            wraplength=600  # Retour √† la ligne automatique
        )
        self.label_lettres.grid(row=1, column=0, sticky="ew", padx=10, pady=5)

        # --- Messages d'erreur/avertissement ---
        self.label_message = tk.Label(
            self.frame_central,
            text="",
            font=("Arial", 11, "italic"),
            bg=CouleursPendu.FOND_PRINCIPAL,
            fg=CouleursPendu.TEXTE_NORMAL,
            wraplength=600,
            height=2
        )
        self.label_message.grid(row=2, column=0, sticky="ew", padx=10, pady=5)

        # --- Panneau des statistiques ---
        self.frame_stats = tk.Frame(
            self.frame_central, bg=CouleursPendu.FOND_PANNEAUX, relief=tk.SUNKEN, bd=2)
        self.frame_stats.grid(row=3, column=0, sticky="nsew", padx=10, pady=5)

        # Configure le frame des statistiques
        self.frame_stats.grid_rowconfigure(0, weight=1)
        self.frame_stats.grid_columnconfigure(0, weight=1)

        self.label_stats = tk.Label(
            self.frame_stats,
            text="Chargement des statistiques...",
            font=("Arial", 10),
            bg=CouleursPendu.FOND_PANNEAUX,
            fg=CouleursPendu.TEXTE_NORMAL,
            justify=tk.LEFT,
            anchor="nw"
        )
        self.label_stats.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)

        # =============================================================================
        # FRAME 3 : ZONE DE SAISIE ET BOUTONS (en bas)
        # =============================================================================
        self.frame_saisie = tk.Frame(
            self, bg=CouleursPendu.FOND_PRINCIPAL, relief=tk.RAISED, bd=2)
        self.frame_saisie.grid(row=2, column=0, sticky="ew", padx=10, pady=5)

        # Configure le frame de saisie
        self.frame_saisie.grid_columnconfigure(0, weight=1)  # Zone de saisie
        self.frame_saisie.grid_columnconfigure(
            1, weight=0)  # Bouton nouvelle partie
        self.frame_saisie.grid_columnconfigure(2, weight=0)  # Bouton quitter

        # --- Zone de saisie de lettres ---
        self.frame_input = tk.Frame(
            self.frame_saisie, bg=CouleursPendu.FOND_PRINCIPAL)
        self.frame_input.grid(row=0, column=0, sticky="ew", padx=10, pady=10)

        # Label d'instruction
        self.label_instruction = tk.Label(
            self.frame_input,
            text="Tapez une lettre :",
            font=("Arial", 12, "bold"),
            bg=CouleursPendu.FOND_PRINCIPAL,
            fg=CouleursPendu.TEXTE_NORMAL
        )
        self.label_instruction.pack(side=tk.LEFT, padx=(0, 10))

        # Champ de saisie avec am√©lioration UX
        self.entry_lettre = tk.Entry(
            self.frame_input,
            font=("Arial", 14, "bold"),
            width=5,
            justify=tk.CENTER,
            relief=tk.SUNKEN,
            bd=3,
            # 5.3 AM√âLIORATION UX - Couleurs personnalis√©es pour le champ
            bg="white",
            fg="black",
            insertbackground="black"  # Couleur du curseur
        )
        self.entry_lettre.pack(side=tk.LEFT, padx=(0, 10))

        # Binding pour d√©tecter la saisie imm√©diatement
        self.entry_lettre.bind("<KeyPress>", self.on_key_press)

        # 5.3 FOCUS AUTOMATIQUE SUR ENTRY
        self.entry_lettre.focus_set()  # Met automatiquement le focus

        # --- Boutons avec couleurs contextuelles ---
        # Bouton Nouvelle Partie
        self.btn_nouvelle_partie = tk.Button(
            self.frame_saisie,
            text="üîÑ Nouvelle Partie",
            font=("Arial", 12, "bold"),
            bg=CouleursPendu.BOUTON_NOUVEAU,  # Utilise les constantes
            fg=CouleursPendu.TEXTE_NORMAL,
            command=self.nouvelle_partie,
            relief=tk.RAISED,
            bd=3,
            padx=10,
            pady=5,
            # 5.3 AM√âLIORATION UX - Effet au survol
            activebackground="#28A428",  # Vert plus fonc√© au survol
            activeforeground="white"
        )
        self.btn_nouvelle_partie.grid(row=0, column=1, padx=5, pady=10)

        # Bouton Quitter
        self.btn_quitter = tk.Button(
            self.frame_saisie,
            text="‚ùå Quitter",
            font=("Arial", 12, "bold"),
            bg=CouleursPendu.BOUTON_QUITTER,  # Utilise les constantes
            fg=CouleursPendu.TEXTE_NORMAL,
            command=self.quitter_jeu,
            relief=tk.RAISED,
            bd=3,
            padx=10,
            pady=5,
            # 5.3 AM√âLIORATION UX - Effet au survol
            activebackground="#B22222",  # Rouge plus fonc√© au survol
            activeforeground="white"
        )
        self.btn_quitter.grid(row=0, column=2, padx=5, pady=10)

    def on_key_press(self, event):
        """
        M√âTHODE ON_KEY_PRESS(EVENT) - Gestionnaire d'√©v√©nements selon sp√©cifications 4.1

        Cette m√©thode est le c≈ìur de l'interaction utilisateur. Elle est appel√©e
        √† chaque fois qu'une touche est press√©e dans le champ de saisie.

        Fonctions :
        - Capturer la touche press√©e
        - Valider (lettre unique, pas d√©j√† essay√©e)
        - Appeler game_manager.proposer_lettre()
        - Mettre √† jour l'affichage
        - V√©rifier victoire/d√©faite
        - Effacer l'Entry

        Args:
            event: √âv√©nement tkinter contenant les informations sur la touche press√©e
        """

        # =============================================================================
        # 5.3 AM√âLIORATION UX - V√©rification de l'√©tat de la saisie
        # =============================================================================

        # Si la saisie est d√©sactiv√©e (par exemple en fin de partie), on ignore
        if not self.saisie_active:
            return "break"

        # =============================================================================
        # 1. CAPTURER LA TOUCHE PRESS√âE
        # =============================================================================

        # R√©cup√®re le caract√®re tap√© (event.char)
        char = event.char
        # R√©cup√®re aussi le nom de la touche pour les touches sp√©ciales (event.keysym)
        key_name = event.keysym

        # Debug : affiche la touche press√©e (utile pour le d√©veloppement)
        print(f"üî§ Touche press√©e : '{char}' (keysym: {key_name})")

        # Efface imm√©diatement le message pr√©c√©dent pour un feedback visuel rapide
        self.effacer_message()

        # =============================================================================
        # 5.2 VALIDATION ET S√âCURIT√â - V√©rification du type de touche
        # =============================================================================

        # 5.2.1 V√©rifier que la saisie est bien une lettre
        if char.isalpha() and len(char) == 1:
            print(f"‚úÖ Lettre valide d√©tect√©e : {char.upper()}")

            # 5.3 FEEDBACK VISUEL IMM√âDIAT - Efface le contenu du champ
            self.entry_lettre.delete(0, tk.END)

            # 2. VALIDER (lettre unique, pas d√©j√† essay√©e) et
            # 3. APPELER game_manager.proposer_lettre()
            self.traiter_proposition(char)

            # 5. EFFACER L'ENTRY - Emp√™che l'affichage du caract√®re
            # (car on vient de l'effacer)
            return "break"

        # 5.2.2 Ignorer les touches sp√©ciales autoris√©es (Shift, Ctrl, Alt, etc.)
        elif key_name in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R',
                          'Alt_L', 'Alt_R', 'Meta_L', 'Meta_R', 'Super_L', 'Super_R',
                          'Caps_Lock', 'Num_Lock', 'Scroll_Lock']:
            # Ces touches ne font rien mais ne d√©clenchent pas d'avertissement
            print(f"üîß Touche sp√©ciale ignor√©e : {key_name}")
            return "break"

        # 5.2.3 Permettre certaines touches d'√©dition
        elif key_name in ['BackSpace', 'Delete', 'Left', 'Right', 'Home', 'End']:
            print(f"‚å®Ô∏è Touche d'√©dition autoris√©e : {key_name}")
            return  # Laisse la touche faire son effet normal

        # 5.2.4 Gestion des touches Enter et Escape
        elif key_name == 'Return':
            print("‚Ü©Ô∏è Touche Entr√©e press√©e - Ignor√©e (saisie imm√©diate)")
            self.afficher_message(
                "Tapez directement une lettre, pas besoin d'appuyer sur Entr√©e ! ‚å®Ô∏è", "info")
            return "break"

        elif key_name == 'Escape':
            print("‚éã Touche √âchap press√©e - Nouvelle partie")
            self.nouvelle_partie()
            return "break"

        # 5.2.5 Gestion des caract√®res non-alphab√©tiques
        elif char and char.isprintable():
            # C'est un caract√®re visible mais pas une lettre
            print(f"‚ö†Ô∏è Caract√®re non-alphab√©tique : {char}")
            self.afficher_message(
                f"'{char}' n'est pas une lettre. Tapez uniquement des lettres ! üî§",
                "avertissement"
            )
            return "break"

        # 5.2.6 Toutes les autres touches (caract√®res de contr√¥le, etc.)
        else:
            # Touches de contr√¥le invisibles - ignor√©es silencieusement
            print(f"üîá Touche de contr√¥le ignor√©e : {key_name}")
            return "break"

    def traiter_proposition(self, lettre):
        """
        Traite une proposition de lettre du joueur.
        Cette m√©thode centralise le traitement d'une lettre propos√©e.

        Args:
            lettre (str): La lettre propos√©e par le joueur
        """
        print(f"üéØ Traitement de la proposition : {lettre.upper()}")

        try:
            # =============================================================================
            # 2. VALIDER ET 3. APPELER game_manager.proposer_lettre()
            # =============================================================================

            # Envoie la lettre au gestionnaire de jeu pour validation et traitement
            # Le GameManager va v√©rifier si la lettre est valide, pas d√©j√† essay√©e, etc.
            resultat = self.game_manager.proposer_lettre(lettre)

            # Affiche le r√©sultat de la validation dans la console (debug)
            print(f"üìù R√©sultat : {resultat}")

            # =============================================================================
            # GESTION DES PROPOSITIONS NON VALIDES
            # =============================================================================

            # Si la proposition n'est pas valide (d√©j√† essay√©e, caract√®re invalide, etc.)
            if not resultat["valide"]:
                # Affiche le message d'erreur/avertissement √† l'utilisateur
                self.afficher_message(resultat["message"], resultat["type"])
                print(f"‚ùå Proposition invalide : {resultat['message']}")
                return  # Sort de la m√©thode sans rien faire d'autre

            # =============================================================================
            # 4. METTRE √Ä JOUR L'AFFICHAGE
            # =============================================================================

            # Si la proposition est valide, met √† jour tous les √©l√©ments visuels
            self.mettre_a_jour_affichage()

            # =============================================================================
            # 5.3 FEEDBACK VISUEL IMM√âDIAT
            # =============================================================================

            # Affiche le message de r√©sultat (lettre correcte/incorrecte)
            self.afficher_message(resultat["message"], resultat["type"])

            # Feedback visuel selon le r√©sultat
            if resultat["correcte"]:
                print(f"‚úÖ Lettre correcte : {lettre.upper()}")
                # On pourrait ajouter ici un effet visuel (clignotement vert, son, etc.)
            else:
                print(f"‚ùå Lettre incorrecte : {lettre.upper()}")
                # On pourrait ajouter ici un effet visuel (clignotement rouge, son, etc.)

            # =============================================================================
            # 5. V√âRIFIER VICTOIRE/D√âFAITE
            # =============================================================================

            # V√©rifie si la partie est termin√©e apr√®s cette proposition
            if self.game_manager.est_gagne():
                print(
                    f"üéâ VICTOIRE ! Mot trouv√© : {self.game_manager.mot_original}")
                # Termine la partie c√¥t√© logique (sauvegarde des stats)
                self.game_manager.terminer_partie()
                # G√®re l'interface de fin de partie
                self.fin_de_partie(victoire=True)

            elif self.game_manager.est_perdu():
                print(
                    f"üíÄ D√âFAITE ! Mot √©tait : {self.game_manager.mot_original}")
                # Termine la partie c√¥t√© logique (sauvegarde des stats)
                self.game_manager.terminer_partie()
                # G√®re l'interface de fin de partie
                self.fin_de_partie(victoire=False)

            else:
                # La partie continue
                erreurs_restantes = self.game_manager.max_erreurs - self.game_manager.erreurs
                print(
                    f"üéÆ Partie en cours - Erreurs restantes : {erreurs_restantes}")

        except Exception as e:
            # 5.1 GESTION ROBUSTE DES ERREURS
            print(f"‚ùå Erreur lors du traitement de la proposition : {e}")
            self.afficher_message(
                f"Erreur inattendue : {str(e)}",
                "erreur"
            )

    def mettre_a_jour_affichage(self):
        """
        M√âTHODE METTRE_A_JOUR_AFFICHAGE() - selon sp√©cifications 4.1

        Met √† jour tous les √©l√©ments de l'affichage avec les donn√©es actuelles du jeu.
        Cette m√©thode est le centre de rafra√Æchissement de l'interface utilisateur.

        Fonctions :
        - Rafra√Æchir ASCII art selon le nombre d'erreurs
        - Rafra√Æchir mot affich√©
        - Rafra√Æchir lettres essay√©es  
        - Rafra√Æchir messages
        """
        print("üîÑ Mise √† jour de l'affichage...")

        try:
            # =============================================================================
            # R√âCUP√âRATION DES DONN√âES DU JEU
            # =============================================================================

            # R√©cup√®re toutes les informations actuelles du jeu
            info = self.game_manager.obtenir_info_jeu()
            print(
                f"üìä Info jeu : Erreurs={info['erreurs']}, Gagn√©={info['est_gagne']}, Perdu={info['est_perdu']}")

            # =============================================================================
            # 1. RAFRA√éCHIR LE MOT AFFICH√â
            # =============================================================================

            # Met √† jour le texte du mot avec les lettres trouv√©es
            self.label_mot.config(text=info["mot_affiche"])

            # 4.2 COULEURS CONTEXTUELLES - Change la couleur selon l'√©tat du jeu
            if info["est_gagne"]:
                # Victoire : couleur verte
                self.label_mot.config(fg=CouleursPendu.TEXTE_SUCCES)
                print("üéâ Mot affich√© en vert (victoire)")
            elif info["est_perdu"]:
                # D√©faite : couleur rouge
                self.label_mot.config(fg=CouleursPendu.TEXTE_DEFAITE)
                print("üíÄ Mot affich√© en rouge (d√©faite)")
            else:
                # Jeu en cours : couleur normale
                self.label_mot.config(fg=CouleursPendu.TEXTE_NORMAL)
                print("üéÆ Mot affich√© en blanc (jeu en cours)")

            # =============================================================================
            # 2. RAFRA√éCHIR LES LETTRES ESSAY√âES
            # =============================================================================

            # R√©cup√®re les lettres format√©es
            lettres = info["lettres_essayees"]

            # Cr√©e un texte color√© et informatif
            texte_lettres = (
                f"‚úÖ Lettres correctes : {lettres['correctes']} | "
                f"‚ùå Lettres incorrectes : {lettres['incorrectes']}"
            )

            # Met √† jour l'affichage des lettres
            self.label_lettres.config(text=texte_lettres)

            # Couleur selon le contexte
            if info["erreurs"] == 0:
                # Aucune erreur : couleur positive
                self.label_lettres.config(fg=CouleursPendu.TEXTE_SUCCES)
            elif info["erreurs"] >= info["max_erreurs"] - 1:
                # Danger (derni√®re chance) : couleur d'avertissement
                self.label_lettres.config(fg=CouleursPendu.TEXTE_AVERTISSEMENT)
            else:
                # Normal : couleur d'info
                self.label_lettres.config(fg=CouleursPendu.TEXTE_INFO)

            # =============================================================================
            # 3. RAFRA√éCHIR ASCII ART SELON LE NOMBRE D'ERREURS
            # =============================================================================

            # Met √† jour le dessin du pendu en fonction du nombre d'erreurs
            self.mettre_a_jour_pendu(info["dessin_pendu"])
            print(f"üé® Dessin du pendu mis √† jour ({info['erreurs']} erreurs)")

            # =============================================================================
            # 4. RAFRA√éCHIR LES STATISTIQUES
            # =============================================================================

            # Met √† jour le panneau des statistiques en temps r√©el
            self.mettre_a_jour_statistiques()
            print("üìà Statistiques mises √† jour")

            # =============================================================================
            # 5. INFORMATIONS DE PROGRESSION
            # =============================================================================

            # Affiche des informations utiles dans la console
            erreurs_restantes = info["max_erreurs"] - info["erreurs"]
            lettres_trouvees = len(info["lettres_essayees"]["correctes"].split(
                ", ")) if info["lettres_essayees"]["correctes"] != "Aucune" else 0

            print(
                f"üìù Progression : {lettres_trouvees} lettres trouv√©es, {erreurs_restantes} chances restantes")

            print("‚úÖ Affichage mis √† jour avec succ√®s")

        except Exception as e:
            # 5.1 GESTION ROBUSTE DES ERREURS
            print(f"‚ùå Erreur lors de la mise √† jour de l'affichage : {e}")
            # En cas d'erreur, on affiche un message mais on continue
            self.afficher_message(
                "Erreur d'affichage - Le jeu continue",
                "erreur"
            )

    def mettre_a_jour_pendu(self, dessin):
        """
        Met √† jour l'affichage du dessin ASCII du pendu.

        Args:
            dessin (str): Le dessin ASCII √† afficher
        """
        # Active temporairement le widget Text pour pouvoir le modifier
        self.text_pendu.config(state=tk.NORMAL)

        # Efface le contenu actuel
        self.text_pendu.delete(1.0, tk.END)

        # Ins√®re le nouveau dessin
        self.text_pendu.insert(1.0, dessin)

        # Centre le texte (approximativement)
        self.text_pendu.tag_add("center", 1.0, tk.END)
        self.text_pendu.tag_config("center", justify=tk.CENTER)

        # Remet en lecture seule
        self.text_pendu.config(state=tk.DISABLED)

    def mettre_a_jour_statistiques(self):
        """
        Met √† jour l'affichage des statistiques.
        """
        stats_formatees = self.game_manager.obtenir_statistiques()
        self.label_stats.config(text=stats_formatees)

    def afficher_message(self, message, type_message):
        """
        Affiche un message dans la zone de messages avec couleurs contextuelles.

        5.3 AM√âLIORATION UX - Feedback visuel imm√©diat avec couleurs
        Cette m√©thode fournit un retour visuel imm√©diat √† l'utilisateur.

        Args:
            message (str): Le message √† afficher
            type_message (str): Le type de message ("erreur", "avertissement", "succes", "info")
        """

        # 4.2 COULEURS CONTEXTUELLES - Utilise les constantes de couleurs
        couleurs = {
            "erreur": CouleursPendu.TEXTE_ERREUR,           # Rouge pour les erreurs
            "avertissement": CouleursPendu.TEXTE_AVERTISSEMENT,  # Jaune pour les avertissements
            "succes": CouleursPendu.TEXTE_SUCCES,           # Vert pour les succ√®s
            "info": CouleursPendu.TEXTE_INFO                # Bleu ciel pour les infos
        }

        # R√©cup√®re la couleur appropri√©e ou utilise la couleur par d√©faut
        couleur = couleurs.get(type_message, CouleursPendu.TEXTE_NORMAL)

        # Log du message dans la console pour le debug
        print(f"üí¨ Message [{type_message}] : {message}")

        # Affiche le message avec la couleur appropri√©e
        self.label_message.config(text=message, fg=couleur)

        # 5.3 AM√âLIORATION UX - Programme l'effacement automatique apr√®s 4 secondes
        # (augment√© de 3 √† 4 secondes pour laisser plus de temps de lecture)
        self.after(4000, self.effacer_message)

    def effacer_message(self):
        """
        Efface le message affich√©.
        """
        self.label_message.config(text="")

    def nouvelle_partie(self):
        """
        D√©marre une nouvelle partie avec gestion compl√®te de l'√©tat.

        M√âTHODE NOUVELLE_PARTIE() - selon sp√©cifications 4.1
        - R√©initialise le GameManager avec un nouveau mot
        - R√©initialise compl√®tement l'affichage
        - Remet le focus sur le champ de saisie (Entry)
        """
        print("üîÑ D√©marrage d'une nouvelle partie...")

        try:
            # =============================================================================
            # 1. R√âINITIALISER LE GAMEMANAGER AVEC UN NOUVEAU MOT
            # =============================================================================

            # Demande au gestionnaire de jeu de d√©marrer une nouvelle partie
            # Cela va s√©lectionner un nouveau mot al√©atoirement
            if not self.game_manager.nouvelle_partie():
                # Si la nouvelle partie n'a pas pu d√©marrer (pas de mots disponibles)
                messagebox.showerror(
                    "Erreur",
                    "Impossible de d√©marrer une nouvelle partie.\n" +
                    "V√©rifiez que le fichier mots.json est pr√©sent et contient des mots."
                )
                return False

            # =============================================================================
            # 2. R√âINITIALISER L'AFFICHAGE COMPLET
            # =============================================================================

            # R√©active la saisie (au cas o√π elle aurait √©t√© d√©sactiv√©e en fin de partie)
            self.saisie_active = True

            # Efface tous les messages d'erreur/avertissement pr√©c√©dents
            self.effacer_message()

            # Remet les couleurs par d√©faut
            self.label_mot.config(fg=CouleursPendu.TEXTE_NORMAL)

            # Efface le contenu du champ de saisie
            self.entry_lettre.delete(0, tk.END)

            # Met √† jour tous les √©l√©ments graphiques avec les nouvelles donn√©es
            self.mettre_a_jour_affichage()

            # =============================================================================
            # 3. FOCUS SUR LE CHAMP DE SAISIE (ENTRY)
            # =============================================================================

            # Remet automatiquement le focus sur le champ de saisie
            # Cela permet au joueur de taper directement sans cliquer
            self.entry_lettre.focus_set()

            # Force la fen√™tre √† passer au premier plan (si elle √©tait en arri√®re-plan)
            self.focus_force()

            # =============================================================================
            # 4. FEEDBACK VISUEL ET SONORE
            # =============================================================================

            # Message de confirmation avec √©moji pour rendre l'exp√©rience plus ludique
            self.afficher_message(
                "‚ú® Nouvelle partie commenc√©e ! Bonne chance ! üçÄ",
                "info"
            )

            print("‚úÖ Nouvelle partie d√©marr√©e avec succ√®s !")
            return True

        except Exception as e:
            # 5.1 GESTION ROBUSTE DES ERREURS
            print(f"‚ùå Erreur lors du d√©marrage de la nouvelle partie : {e}")

            # Message d'erreur clair pour l'utilisateur
            messagebox.showerror(
                "Erreur de nouvelle partie",
                f"Une erreur est survenue lors du d√©marrage :\n{str(e)}\n\n" +
                "V√©rifiez que tous les fichiers sont pr√©sents."
            )
            return False

    def fin_de_partie(self, victoire):
        """
        M√âTHODE FIN_DE_PARTIE(VICTOIRE) - selon sp√©cifications 4.1

        G√®re compl√®tement la fin de partie (victoire ou d√©faite).
        Cette m√©thode centralise toutes les actions √† effectuer en fin de partie.

        Fonctions :
        - Afficher message victoire/d√©faite
        - Mettre √† jour statistiques
        - Sauvegarder statistiques
        - D√©sactiver saisie
        - Proposer nouvelle partie

        Args:
            victoire (bool): True si le joueur a gagn√©, False sinon
        """
        print(f"üèÅ Fin de partie - Victoire : {victoire}")

        try:
            # =============================================================================
            # 1. D√âSACTIVER LA SAISIE
            # =============================================================================

            # D√©sactive la saisie pour √©viter que le joueur continue √† taper
            self.saisie_active = False
            print("üîí Saisie d√©sactiv√©e")

            # Efface le contenu du champ de saisie
            self.entry_lettre.delete(0, tk.END)

            # =============================================================================
            # R√âCUP√âRATION DES INFORMATIONS DE LA PARTIE
            # =============================================================================

            # R√©cup√®re toutes les informations de la partie qui vient de se terminer
            info = self.game_manager.obtenir_info_jeu()

            # =============================================================================
            # 2. METTRE √Ä JOUR ET 3. SAUVEGARDER LES STATISTIQUES
            # =============================================================================

            # Les statistiques sont automatiquement mises √† jour par GameManager.terminer_partie()
            # qui a √©t√© appel√© avant cette m√©thode, mais on rafra√Æchit l'affichage
            self.mettre_a_jour_statistiques()
            print("üìä Statistiques mises √† jour et sauvegard√©es")

            # =============================================================================
            # 1. AFFICHER MESSAGE VICTOIRE/D√âFAITE
            # =============================================================================

            # Pr√©pare le message de fin selon le r√©sultat
            if victoire:
                # Messages de victoire avec √©mojis et informations d√©taill√©es
                titre = "üéâ VICTOIRE ! üéâ"

                # Cr√©e un message personnalis√© selon la performance
                if info['erreurs'] == 0:
                    performance = "PARFAIT ! Aucune erreur ! üèÜ"
                elif info['erreurs'] <= 2:
                    performance = "EXCELLENT ! Tr√®s peu d'erreurs ! ‚≠ê"
                elif info['erreurs'] <= 4:
                    performance = "BIEN JOU√â ! üëç"
                else:
                    performance = "Gagn√© de justesse ! üòÖ"

                message = (
                    f"F√©licitations ! Vous avez trouv√© le mot :\\n"
                    f"'{info['mot_original']}'\\n\\n"
                    f"üìä Votre performance :\\n"
                    f"‚Ä¢ Erreurs : {info['erreurs']}/{info['max_erreurs']}\\n"
                    f"‚Ä¢ {performance}\\n\\n"
                    f"üéØ Continuez sur cette lanc√©e !"
                )

                # Couleur de victoire
                self.afficher_message("üéâ VICTOIRE ! üéâ", "succes")

            else:
                # Messages de d√©faite encourageants
                titre = "üíÄ D√©faite üíÄ"

                message = (
                    f"Dommage ! Le mot √©tait :\\n"
                    f"'{info['mot_original']}'\\n\\n"
                    f"üìä Vos tentatives :\\n"
                    f"‚Ä¢ Lettres correctes trouv√©es : {info['lettres_essayees']['correctes']}\\n"
                    f"‚Ä¢ Erreurs commises : {info['erreurs']}/{info['max_erreurs']}\\n\\n"
                    f"üí™ Ne vous d√©couragez pas, vous ferez mieux la prochaine fois !"
                )

                # Couleur de d√©faite
                self.afficher_message("üíÄ Essayez encore ! üíÄ", "erreur")

            # =============================================================================
            # 4. PROPOSER NOUVELLE PARTIE
            # =============================================================================

            # Affiche une bo√Æte de dialogue avec le choix de rejouer
            reponse = messagebox.askyesno(
                titre,
                message + "\\n\\nVoulez-vous jouer une nouvelle partie ?"
            )

            # Traite la r√©ponse du joueur
            if reponse:
                print("üîÑ Le joueur veut rejouer")
                # Le joueur veut rejouer - d√©marre une nouvelle partie
                self.nouvelle_partie()
            else:
                print("‚è∏Ô∏è Le joueur ne veut pas rejouer")
                # Le joueur ne veut pas rejouer - garde la partie affich√©e mais inactive
                self.afficher_message(
                    "üéÆ Partie termin√©e. Cliquez sur 'Nouvelle Partie' pour rejouer ou 'Quitter' pour fermer.",
                    "info"
                )

                # Affiche un r√©sum√© des statistiques
                stats = self.data_manager.obtenir_statistiques_formatees()
                print("üìà Statistiques finales :")
                print(stats)

            print("‚úÖ Fin de partie g√©r√©e avec succ√®s")

        except Exception as e:
            # 5.1 GESTION ROBUSTE DES ERREURS
            print(f"‚ùå Erreur lors de la gestion de fin de partie : {e}")

            # Message d'erreur pour l'utilisateur
            messagebox.showerror(
                "Erreur",
                f"Une erreur est survenue en fin de partie :\\n{str(e)}\\n\\n" +
                "Vous pouvez continuer √† jouer normalement."
            )

            # R√©active la saisie en cas d'erreur pour que le jeu reste utilisable
            self.saisie_active = True

    def quitter_jeu(self):
        """
        Ferme l'application apr√®s confirmation.
        """
        reponse = messagebox.askyesno(
            "Quitter",
            "√ätes-vous s√ªr de vouloir quitter le jeu ?"
        )

        if reponse:
            self.destroy()  # Ferme la fen√™tre et termine le programme


# Fonction pour cr√©er et lancer l'interface
def lancer_jeu():
    """
    Lance le jeu du pendu avec l'interface graphique.
    """
    try:
        # Cr√©e et lance l'application
        app = PenduUI()
        app.mainloop()
    except Exception as e:
        print(f"Erreur lors du lancement du jeu : {e}")
        messagebox.showerror("Erreur", f"Une erreur est survenue :\\n{e}")


# Test de l'interface (si ce module est ex√©cut√© directement)
if __name__ == "__main__":
    lancer_jeu()
