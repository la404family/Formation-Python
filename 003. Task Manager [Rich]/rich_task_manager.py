import json
import os
from datetime import datetime
from rich import print
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, IntPrompt, Confirm
from rich.progress import track, Progress, SpinnerColumn, TextColumn
import time

console = Console()
TASKS_FILE = "tasks.json"


class RichTaskManager:
    """Gestionnaire de t√¢ches avec interface Rich"""

    def __init__(self):
        self.console = Console()
        self.tasks = self.load_tasks()

    def load_tasks(self):
        """Charge les t√¢ches depuis le fichier JSON"""
        if os.path.exists(TASKS_FILE):
            with open(TASKS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return []

    def save_tasks(self):
        """Sauvegarde les t√¢ches dans le fichier JSON"""
        with open(TASKS_FILE, "w", encoding="utf-8") as f:
            json.dump(self.tasks, f, indent=2, ensure_ascii=False)

    def show_header(self):
        """Affiche l'en-t√™te du programme"""
        self.console.print("*" * 60, style="bold blue")
        self.console.print("*" + " " * 58 + "*", style="bold blue")
        self.console.print(
            "*      üóÇÔ∏è  GESTIONNAIRE DE T√ÇCHES RICH      *", style="bold blue")
        self.console.print(
            "*        G√©rez vos t√¢ches avec style !        *", style="bold blue")
        self.console.print("*" + " " * 58 + "*", style="bold blue")
        self.console.print("*" * 60, style="bold blue")
        self.console.print()

    def show_menu(self):
        """Affiche le menu principal"""
        menu_table = Table(show_header=False, box=None, padding=(0, 2))
        menu_table.add_column("Option", style="bold cyan")
        menu_table.add_column("Description", style="white")

        menu_table.add_row("1", "üìã Voir les t√¢ches")
        menu_table.add_row("2", "‚ûï Ajouter une t√¢che")
        menu_table.add_row("3", "‚úÖ Marquer comme compl√©t√©e")
        menu_table.add_row("4", "üóëÔ∏è  Supprimer une t√¢che")
        menu_table.add_row("5", "üìä Statistiques")
        menu_table.add_row("6", "üö™ Quitter")

        self.console.print("*" * 50, style="bold green")
        self.console.print(
            "*           [bold green]Menu Principal[/]           *", style="bold green")
        self.console.print("*" * 50, style="bold green")
        self.console.print(menu_table)
        self.console.print("*" * 50, style="bold green")

    def list_tasks(self):
        """Affiche toutes les t√¢ches dans un tableau Rich"""
        if not self.tasks:
            self.console.print("*" * 50, style="bold yellow")
            self.console.print(
                "*        üìù Liste des T√¢ches        *", style="bold yellow")
            self.console.print("*" * 50, style="bold yellow")
            self.console.print(
                "*                                  *", style="bold yellow")
            self.console.print(
                "*   [yellow]Aucune t√¢che trouv√©e.[/]   *", style="bold yellow")
            self.console.print(
                "*  Ajoutez une t√¢che pour commencer ! *", style="bold yellow")
            self.console.print(
                "*                                  *", style="bold yellow")
            self.console.print("*" * 50, style="bold yellow")
            return

        # Cr√©ation du tableau
        table = Table(title="üìã Liste des T√¢ches", title_style="bold blue")
        table.add_column("ID", justify="center", style="cyan", width=6)
        table.add_column("Statut", justify="center", width=8)
        table.add_column("T√¢che", style="white", min_width=30)
        table.add_column("Cr√©√©e le", style="dim", width=16)

        for task in self.tasks:
            # D√©finition du statut avec couleur
            if task["completed"]:
                status = "[green]‚úÖ Fait[/]"
                task_text = f"[dim strikethrough]{task['title']}[/]"
            else:
                status = "[yellow]‚è≥ En cours[/]"
                task_text = task['title']

            table.add_row(
                str(task["id"]),
                status,
                task_text,
                task["created"]
            )

        self.console.print(table)
        self.console.print()

    def add_task(self):
        """Ajoute une nouvelle t√¢che avec animation"""
        title = Prompt.ask("[green]üìù Titre de la nouvelle t√¢che[/]")

        if not title.strip():
            self.console.print("[red]‚ùå Le titre ne peut pas √™tre vide![/]")
            return

        # Animation de chargement
        with Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]Cr√©ation de la t√¢che..."),
            console=self.console,
            transient=True
        ) as progress:
            task = progress.add_task("Creating...", total=None)
            time.sleep(1)

        # Cr√©ation de la t√¢che
        new_task = {
            "id": len(self.tasks) + 1,
            "title": title.strip(),
            "completed": False,
            "created": datetime.now().strftime("%d/%m/%Y %H:%M")
        }

        self.tasks.append(new_task)
        self.save_tasks()

        # Message de succ√®s
        self.console.print("*" * 50, style="bold green")
        self.console.print(
            "*              Succ√®s              *", style="bold green")
        self.console.print("*" * 50, style="bold green")
        self.console.print(
            "*                                  *", style="bold green")
        self.console.print(
            f"* [green]‚úÖ T√¢che ajout√©e avec succ√®s ![/] *", style="bold green")
        self.console.print(f"*   {title[:30]:<30}   *", style="bold green")
        self.console.print(
            "*                                  *", style="bold green")
        self.console.print("*" * 50, style="bold green")

    def complete_task(self):
        """Marque une t√¢che comme compl√©t√©e"""
        if not self.tasks:
            self.console.print("[yellow]üìù Aucune t√¢che √† compl√©ter[/]")
            return

        self.list_tasks()

        try:
            task_id = IntPrompt.ask(
                "[cyan]üéØ ID de la t√¢che √† marquer comme compl√©t√©e[/]")

            for task in self.tasks:
                if task["id"] == task_id:
                    if task["completed"]:
                        self.console.print(
                            f"[yellow]‚ö†Ô∏è  La t√¢che {task_id} est d√©j√† compl√©t√©e![/]")
                        return

                    task["completed"] = True
                    self.save_tasks()

                    # Animation de succ√®s
                    self.console.print("[green]üéâ F√©licitations ![/]")
                    self.console.print("*" * 50, style="bold green")
                    self.console.print(
                        "*           T√¢che Termin√©e          *", style="bold green")
                    self.console.print("*" * 50, style="bold green")
                    self.console.print(
                        "*                                   *", style="bold green")
                    self.console.print(
                        f"* [green]‚úÖ T√¢che #{task_id} marqu√©e comme compl√©t√©e[/] *", style="bold green")
                    self.console.print(
                        f"*   {task['title'][:29]:<29}   *", style="bold green")
                    self.console.print(
                        "*                                   *", style="bold green")
                    self.console.print("*" * 50, style="bold green")
                    return

            self.console.print(f"[red]‚ùå T√¢che #{task_id} non trouv√©e[/]")

        except (ValueError, KeyboardInterrupt):
            self.console.print("[red]‚ùå ID invalide ou op√©ration annul√©e[/]")

    def delete_task(self):
        """Supprime une t√¢che"""
        if not self.tasks:
            self.console.print("[yellow]üìù Aucune t√¢che √† supprimer[/]")
            return

        self.list_tasks()

        try:
            task_id = IntPrompt.ask("[red]üóëÔ∏è  ID de la t√¢che √† supprimer[/]")

            for i, task in enumerate(self.tasks):
                if task["id"] == task_id:
                    # Confirmation
                    confirm = Confirm.ask(
                        f"[red]‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer:[/]\n[white]'{task['title']}'[/]"
                    )

                    if confirm:
                        self.tasks.pop(i)
                        self.save_tasks()

                        self.console.print("*" * 50, style="bold red")
                        self.console.print(
                            "*             Suppression            *", style="bold red")
                        self.console.print("*" * 50, style="bold red")
                        self.console.print(
                            "*                                    *", style="bold red")
                        self.console.print(
                            f"* [red]üóëÔ∏è  T√¢che #{task_id} supprim√©e[/]       *", style="bold red")
                        self.console.print(
                            f"*   {task['title'][:30]:<30}   *", style="bold red")
                        self.console.print(
                            "*                                    *", style="bold red")
                        self.console.print("*" * 50, style="bold red")
                    else:
                        self.console.print(
                            "[yellow]‚èπÔ∏è  Suppression annul√©e[/]")
                    return

            self.console.print(f"[red]‚ùå T√¢che #{task_id} non trouv√©e[/]")

        except (ValueError, KeyboardInterrupt):
            self.console.print("[red]‚ùå ID invalide ou op√©ration annul√©e[/]")

    def show_statistics(self):
        """Affiche les statistiques des t√¢ches"""
        if not self.tasks:
            self.console.print("[yellow]üìä Aucune statistique disponible[/]")
            return

        total_tasks = len(self.tasks)
        completed_tasks = sum(1 for task in self.tasks if task["completed"])
        pending_tasks = total_tasks - completed_tasks
        completion_rate = (completed_tasks / total_tasks) * \
            100 if total_tasks > 0 else 0

        # Tableau de statistiques
        stats_table = Table(title="üìä Statistiques des T√¢ches",
                            title_style="bold magenta")
        stats_table.add_column("M√©trique", style="cyan", width=20)
        stats_table.add_column("Valeur", style="white", width=15)
        stats_table.add_column("D√©tail", style="dim", width=20)

        stats_table.add_row("üìù Total", str(total_tasks), "t√¢ches cr√©√©es")
        stats_table.add_row("‚úÖ Compl√©t√©es", str(
            completed_tasks), f"{completion_rate:.1f}% du total")
        stats_table.add_row("‚è≥ En cours", str(pending_tasks),
                            f"{100-completion_rate:.1f}% du total")

        self.console.print(stats_table)

        # Barre de progression visuelle
        if total_tasks > 0:
            progress_text = f"Progression: {completed_tasks}/{total_tasks} t√¢ches compl√©t√©es"
            with Progress(console=self.console) as progress:
                task = progress.add_task(
                    "[green]" + progress_text, total=total_tasks)
                progress.update(task, completed=completed_tasks)
                time.sleep(1)

    def run(self):
        """Boucle principale du programme"""
        self.console.clear()
        self.show_header()

        while True:
            try:
                self.show_menu()

                choice = Prompt.ask(
                    "[bold yellow]üéØ Choisissez une option[/]",
                    choices=["1", "2", "3", "4", "5", "6"],
                    default="1"
                )

                self.console.print()  # Ligne vide

                if choice == "1":
                    self.list_tasks()
                elif choice == "2":
                    self.add_task()
                elif choice == "3":
                    self.complete_task()
                elif choice == "4":
                    self.delete_task()
                elif choice == "5":
                    self.show_statistics()
                elif choice == "6":
                    # Animation de sortie
                    self.console.print("*" * 60, style="bold cyan")
                    self.console.print(
                        "*                    Au revoir                    *", style="bold cyan")
                    self.console.print("*" * 60, style="bold cyan")
                    self.console.print(
                        "*                                                  *", style="bold cyan")
                    self.console.print(
                        "* [bold blue]üëã Merci d'avoir utilis√© le Gestionnaire![/] *", style="bold cyan")
                    self.console.print(
                        "*                  √Ä bient√¥t !                    *", style="bold cyan")
                    self.console.print(
                        "*                                                  *", style="bold cyan")
                    self.console.print("*" * 60, style="bold cyan")
                    break

                # Pause avant le prochain menu
                self.console.print("\n" + "‚îÄ" * 60)
                Prompt.ask(
                    "[dim]Appuyez sur Entr√©e pour continuer...[/]", default="")
                self.console.clear()
                self.show_header()

            except KeyboardInterrupt:
                self.console.print(
                    "\n[yellow]üëã Programme interrompu. Au revoir ![/]")
                break
            except Exception as e:
                self.console.print(f"[red]‚ùå Erreur: {e}[/]")


if __name__ == "__main__":
    manager = RichTaskManager()
    manager.run()
