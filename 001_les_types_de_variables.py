"""
Les Types de Variables en Python - Guide Complet pour D√©butants
===============================================================

Ce fichier pr√©sente tous les types de donn√©es de base en Python avec des 
explications d√©taill√©es et des exemples pratiques.

Python est un langage √† typage dynamique : vous n'avez pas besoin de d√©clarer
le type d'une variable, Python le devine automatiquement !
"""

# =============================================================================
# 1. LES CHA√éNES DE CARACT√àRES (STRINGS) - TYPE : str
# =============================================================================

print("=" * 60)
print("1. LES CHA√éNES DE CARACT√àRES (STRINGS)")
print("=" * 60)

# Qu'est-ce qu'une cha√Æne de caract√®res ?
# C'est du TEXTE : lettres, chiffres, symboles, espaces...
# En Python, on les √©crit entre guillemets

# üìù M√©thode 1 : Guillemets doubles (recommand√©)
chaine_double = "Bonjour le monde !"
print(f"Guillemets doubles : {chaine_double}")
print(f"Type : {type(chaine_double)}")  # Affiche <class 'str'>

# üìù M√©thode 2 : Guillemets simples (√©quivalent)
chaine_simple = 'Hello World !'
print(f"Guillemets simples : {chaine_simple}")

# ü§î QUESTION : Quand utiliser quoi ?
# - Utilisez " quand votre texte contient des apostrophes
phrase_avec_apostrophe = "Je m'appelle Pierre"
print(f"Avec apostrophe : {phrase_avec_apostrophe}")

# - Utilisez ' quand votre texte contient des guillemets
phrase_avec_guillemets = 'Il a dit : "Bonjour !"'
print(f"Avec guillemets : {phrase_avec_guillemets}")

# üìù M√©thode 3 : √âchappement avec backslash (\)
# Le backslash "√©chappe" le caract√®re suivant
chaine_echappee = 'Je m\'appelle Pierre et il a dit : "Salut !"'
print(f"Avec √©chappement : {chaine_echappee}")

# üí° ASTUCE : Caract√®res sp√©ciaux avec √©chappement
exemples_echappement = "Nouvelle ligne : \nTabulation : \tGuillemet : \""
print(f"Caract√®res sp√©ciaux :\n{exemples_echappement}")

# üìù M√©thode 4 : Cha√Ænes multi-lignes avec ''' ou """
# Parfait pour de longs textes ou de la documentation
poeme = '''Roses are red,
Violets are blue,
Python is awesome,
And so are you !'''
print(f"Po√®me :\n{poeme}")

# Alternative avec guillemets doubles
description = """Ceci est une description
tr√®s longue qui s'√©tend
sur plusieurs lignes."""
print(f"Description :\n{description}")

# üìù M√©thode 5 : Raw strings (cha√Ænes brutes) avec r""
# Le 'r' signifie "raw" = brut, pas d'interpr√©tation des \
chemin_fichier = r"C:\Users\nom_utilisateur\Documents\fichier.txt"
print(f"Chemin de fichier : {chemin_fichier}")

# üìù M√©thode 6 : Concat√©nation implicite (cha√Ænes longues)
# Python joint automatiquement les cha√Ænes adjacentes
message_long = ("Ceci est un message tr√®s long "
                "qui est √©crit sur plusieurs lignes "
                "pour une meilleure lisibilit√© du code.")
print(f"Message long : {message_long}")

# üîç V√âRIFICATION DU TYPE
print(f"\nType de 'Bonjour' : {type('Bonjour')}")
# False car 'Bonjour' n'est pas l'objet str
print(f"Est-ce une cha√Æne ? {'Bonjour' is str}")
print(f"Est-ce une instance de str ? {isinstance('Bonjour', str)}")  # True !

# =============================================================================
# 2. LES NOMBRES ENTIERS (INTEGERS) - TYPE : int
# =============================================================================

print("\n" + "=" * 60)
print("2. LES NOMBRES ENTIERS (INTEGERS)")
print("=" * 60)

# Les entiers sont des nombres SANS virgule : ..., -2, -1, 0, 1, 2, ...
nombre_entier = 42
print(f"Nombre entier : {nombre_entier}")
print(f"Type : {type(nombre_entier)}")

# üí° ASTUCE : Python g√®re les TR√àS grands nombres automatiquement !
petit_nombre = 5
grand_nombre = 123456789012345678901234567890
tres_grand_nombre = 1_000_000_000  # Les _ rendent plus lisible !

print(f"Petit nombre : {petit_nombre}")
print(f"Grand nombre : {grand_nombre}")
print(f"Tr√®s grand nombre : {tres_grand_nombre}")

# üî¢ Diff√©rentes bases num√©riques
nombre_binaire = 0b1010      # Base 2 (binaire) = 10 en d√©cimal
nombre_octal = 0o12          # Base 8 (octal) = 10 en d√©cimal
nombre_hexadecimal = 0xFF    # Base 16 (hexad√©cimal) = 255 en d√©cimal

print(f"Binaire 0b1010 = {nombre_binaire}")
print(f"Octal 0o12 = {nombre_octal}")
print(f"Hexad√©cimal 0xFF = {nombre_hexadecimal}")

# =============================================================================
# 3. LES NOMBRES D√âCIMAUX (FLOATS) - TYPE : float
# =============================================================================

print("\n" + "=" * 60)
print("3. LES NOMBRES D√âCIMAUX (FLOATS)")
print("=" * 60)

# Les floats sont des nombres AVEC virgule (d√©cimaux)
nombre_decimal = 3.14159
prix = 19.99
temperature = -5.2

print(f"Pi approximatif : {nombre_decimal}")
print(f"Prix : {prix}‚Ç¨")
print(f"Temp√©rature : {temperature}¬∞C")
print(f"Type : {type(nombre_decimal)}")

# üí° IMPORTANT : M√™me avec .0, c'est un float !
nombre_entier_en_float = 5.0
print(f"5.0 est de type : {type(nombre_entier_en_float)}")

# üî¨ Notation scientifique
nombre_scientifique = 1.5e-4  # 1.5 √ó 10^-4 = 0.00015
print(f"Notation scientifique 1.5e-4 = {nombre_scientifique}")

# ‚ö†Ô∏è ATTENTION : Pr√©cision limit√©e des floats
resultat = 0.1 + 0.2
print(f"0.1 + 0.2 = {resultat}")  # Attention : pas exactement 0.3 !
print(f"Est-ce √©gal √† 0.3 ? {resultat == 0.3}")  # False !

# =============================================================================
# 4. LES BOOL√âENS (BOOLEANS) - TYPE : bool
# =============================================================================

print("\n" + "=" * 60)
print("4. LES BOOL√âENS (BOOLEANS)")
print("=" * 60)

# Les bool√©ens n'ont que 2 valeurs possibles : True ou False
est_majeur = True
a_permis = False

print(f"Est majeur : {est_majeur}")
print(f"A un permis : {a_permis}")
print(f"Type : {type(est_majeur)}")

# üîÑ CONVERSION EN BOOL√âEN avec bool()
print("\nüîÑ Conversion en bool√©ens :")

# Ces valeurs sont consid√©r√©es comme FALSE (falsy) :
print(f"bool(0) = {bool(0)}")              # 0 = False
print(f"bool(0.0) = {bool(0.0)}")          # 0.0 = False
print(f"bool('') = {bool('')}")            # Cha√Æne vide = False
print(f"bool([]) = {bool([])}")            # Liste vide = False
print(f"bool(None) = {bool(None)}")        # None = False

# Toutes les autres valeurs sont TRUE (truthy) :
print(f"bool(1) = {bool(1)}")              # Nombre non-z√©ro = True
print(f"bool(-5) = {bool(-5)}")            # Nombre n√©gatif = True
print(f"bool('Bonjour') = {bool('Bonjour')}")  # Cha√Æne non-vide = True
print(f"bool([1, 2]) = {bool([1, 2])}")    # Liste non-vide = True

# üí° UTILISATION PRATIQUE
age = 25
if age:  # age est truthy car c'est un nombre non-z√©ro
    print(f"L'√¢ge {age} est consid√©r√© comme True")

# =============================================================================
# 5. CONVERSIONS DE TYPES (TYPE CASTING)
# =============================================================================

print("\n" + "=" * 60)
print("5. CONVERSIONS DE TYPES")
print("=" * 60)

# üîÑ Conversion vers STRING avec str()
nombre = 42
nombre_en_texte = str(nombre)
print(f"str({nombre}) = '{nombre_en_texte}' (type: {type(nombre_en_texte)})")

# üîÑ Conversion vers INTEGER avec int()
texte_nombre = "123"
texte_en_nombre = int(texte_nombre)
print(f"int('{texte_nombre}') = {texte_en_nombre} (type: {type(texte_en_nombre)})")

# ‚ö†Ô∏è ATTENTION : int() supprime la partie d√©cimale !
decimal = 3.99
decimal_en_entier = int(decimal)
print(f"int({decimal}) = {decimal_en_entier}")  # R√©sultat : 3 (pas 4 !)

# üîÑ Conversion vers FLOAT avec float()
entier = 10
entier_en_decimal = float(entier)
print(f"float({entier}) = {entier_en_decimal} (type: {type(entier_en_decimal)})")

# üîÑ Conversion vers BOOLEAN avec bool()
print(f"bool(42) = {bool(42)}")
print(f"bool(0) = {bool(0)}")

# ‚ùå ERREURS COURANTES de conversion
try:
    # Ceci va g√©n√©rer une erreur !
    int("Bonjour")
except ValueError as e:
    print(f"‚ùå Erreur : {e}")

try:
    # Ceci aussi !
    float("3.14.15")
except ValueError as e:
    print(f"‚ùå Erreur : {e}")

# =============================================================================
# 6. LES COLLECTIONS - STRUCTURES DE DONN√âES
# =============================================================================

print("\n" + "=" * 60)
print("6. LES COLLECTIONS")
print("=" * 60)

# üìã LES LISTES (LISTS) - TYPE : list
# Les listes sont MODIFIABLES et ORDONN√âES
ma_liste = [1, 2, 3, "Python", True, 3.14]
print(f"Liste : {ma_liste}")
print(f"Type : {type(ma_liste)}")
print(f"Longueur : {len(ma_liste)} √©l√©ments")

# Acc√®s par index (commence √† 0)
print(f"Premier √©l√©ment : {ma_liste[0]}")
print(f"Dernier √©l√©ment : {ma_liste[-1]}")

# Modification possible
ma_liste[0] = "Nouveau"
print(f"Liste modifi√©e : {ma_liste}")

# üì¶ LES TUPLES (TUPLES) - TYPE : tuple
# Les tuples sont NON-MODIFIABLES et ORDONN√âS
mon_tuple = (1, 2, 3, "Python", True)
print(f"\nTuple : {mon_tuple}")
print(f"Type : {type(mon_tuple)}")

# Acc√®s par index comme les listes
print(f"Deuxi√®me √©l√©ment : {mon_tuple[1]}")

# ‚ö†Ô∏è Impossible de modifier un tuple !
# mon_tuple[0] = "Nouveau"  # Ceci g√©n√©rerait une erreur !

# üóÇÔ∏è LES DICTIONNAIRES (DICTIONARIES) - TYPE : dict
# Les dictionnaires stockent des paires cl√©-valeur
mon_dictionnaire = {
    "nom": "Dupont",
    "age": 30,
    "ville": "Paris",
    "programmeur": True
}
print(f"\nDictionnaire : {mon_dictionnaire}")
print(f"Type : {type(mon_dictionnaire)}")

# Acc√®s par cl√©
print(f"Nom : {mon_dictionnaire['nom']}")
print(f"Age : {mon_dictionnaire['age']}")

# Modification possible
mon_dictionnaire["age"] = 31
print(f"Age modifi√© : {mon_dictionnaire['age']}")

# üîó LES ENSEMBLES (SETS) - TYPE : set
# Les ensembles contiennent des √©l√©ments UNIQUES (pas de doublons)
mon_ensemble = {1, 2, 3, 3, 3, 4, 5}  # Les 3 en double disparaissent !
print(f"\nEnsemble : {mon_ensemble}")  # R√©sultat : {1, 2, 3, 4, 5}
print(f"Type : {type(mon_ensemble)}")

# Ajout d'√©l√©ment
mon_ensemble.add(6)
print(f"Apr√®s ajout de 6 : {mon_ensemble}")

# üö´ LA VALEUR NONE - TYPE : NoneType
# None repr√©sente "rien", "vide", "absence de valeur"
ma_variable_vide = None
print(f"\nValeur None : {ma_variable_vide}")
print(f"Type : {type(ma_variable_vide)}")

# Utilisation courante de None


def ma_fonction():
    pass  # Ne fait rien, retourne None


resultat = ma_fonction()
print(f"Fonction sans return : {resultat}")

# =============================================================================
# 7. V√âRIFICATION ET IDENTIFICATION DES TYPES
# =============================================================================

print("\n" + "=" * 60)
print("7. V√âRIFICATION DES TYPES")
print("=" * 60)

# üîç La fonction type()
exemples = [
    "Bonjour",      # str
    42,             # int
    3.14,           # float
    True,           # bool
    [1, 2, 3],      # list
    (1, 2, 3),      # tuple
    {"a": 1},       # dict
    {1, 2, 3},      # set
    None            # NoneType
]

for exemple in exemples:
    print(f"type({exemple}) = {type(exemple).__name__}")

# üîç La fonction isinstance() - Plus robuste
print(f"\nisinstance('Hello', str) = {isinstance('Hello', str)}")
print(f"isinstance(42, int) = {isinstance(42, int)}")
print(f"isinstance(3.14, (int, float)) = {isinstance(3.14, (int, float))}")

# =============================================================================
# 8. BONNES PRATIQUES POUR D√âBUTANTS
# =============================================================================

print("\n" + "=" * 60)
print("8. BONNES PRATIQUES")
print("=" * 60)

# ‚úÖ Nommage des variables (conventions Python)
age_utilisateur = 25        # ‚úÖ snake_case recommand√©
nom_complet = "Jean Dupont"  # ‚úÖ Descriptif
PI = 3.14159               # ‚úÖ Constante en MAJUSCULES

# ‚ùå √âvitez ces noms
# l = [1, 2, 3]           # ‚ùå Trop court
# O = "Bonjour"           # ‚ùå Peut √™tre confondu avec 0
# class = "Python"        # ‚ùå Mot-cl√© r√©serv√©

# ‚úÖ Utilisez des f-strings pour l'affichage (Python 3.6+)
nom = "Pierre"
age = 30
message = f"Je m'appelle {nom} et j'ai {age} ans."
print(f"F-string : {message}")

# ‚úÖ Soyez explicite avec les conversions
nombre_str = "42"
nombre_int = int(nombre_str)  # ‚úÖ Conversion explicite
print(f"'{nombre_str}' converti en nombre : {nombre_int}")

# =============================================================================
# 9. R√âSUM√â RAPIDE - AIDE-M√âMOIRE
# =============================================================================

print("\n" + "=" * 60)
print("9. R√âSUM√â - AIDE-M√âMOIRE")
print("=" * 60)

aide_memoire = """
üìù TYPES DE BASE :
   str    ‚Üí "texte" ou 'texte'          ‚Üí Texte
   int    ‚Üí 42                          ‚Üí Nombre entier  
   float  ‚Üí 3.14                        ‚Üí Nombre d√©cimal
   bool   ‚Üí True ou False               ‚Üí Vrai/Faux

üìö COLLECTIONS :
   list   ‚Üí [1, 2, 3]                   ‚Üí Liste modifiable
   tuple  ‚Üí (1, 2, 3)                   ‚Üí Liste non-modifiable
   dict   ‚Üí {"cl√©": "valeur"}           ‚Üí Dictionnaire
   set    ‚Üí {1, 2, 3}                   ‚Üí Ensemble (unique)
   
üîß FONCTIONS UTILES :
   type(variable)                       ‚Üí Affiche le type
   isinstance(variable, type)           ‚Üí V√©rifie le type
   len(collection)                      ‚Üí Longueur/taille
   
üîÑ CONVERSIONS :
   str(42)        ‚Üí "42"
   int("42")      ‚Üí 42
   float("3.14")  ‚Üí 3.14
   bool(1)        ‚Üí True
"""

print(aide_memoire)
