"""
======================================================================
LES CONVERSIONS DE TYPES EN PYTHON - GUIDE COMPLET
======================================================================

üîÑ Les conversions permettent de changer le type d'une donn√©e.
C'est essentiel quand on travaille avec des inputs utilisateur,
des fichiers, ou quand on m√©lange diff√©rents types de donn√©es.
"""

print("=" * 70)
print("LES CONVERSIONS DE TYPES EN PYTHON - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. CONCEPT DE BASE : POURQUOI CONVERTIR ?")
print("=" * 50)

# üéØ Exemple concret : input() retourne TOUJOURS une cha√Æne
print("üéØ PROBL√àME COURANT :")
print("   input() retourne toujours une cha√Æne, m√™me pour les nombres")
print()

# Simulation d'un input utilisateur
age_saisi = "25"  # Simule input("Quel est votre √¢ge ?")
print(f"   Age saisi : {age_saisi}")
print(f"   Type : {type(age_saisi)}")
print(f"   Est-ce un nombre ? Non, c'est du texte !")

# Pour faire des calculs, il faut convertir
age_numerique = int(age_saisi)
age_dans_10_ans = age_numerique + 10
print(f"   Apr√®s conversion : {age_numerique} (type: {type(age_numerique)})")
print(f"   Dans 10 ans : {age_dans_10_ans} ans")

print("\nüí° ANALOGIE - Les conversions comme des traducteurs :")
print("""
    TEXTE "123"  ‚Üí  [TRADUCTEUR int()]  ‚Üí  NOMBRE 123
    NOMBRE 45    ‚Üí  [TRADUCTEUR str()]  ‚Üí  TEXTE "45"
    TEXTE "3.14" ‚Üí  [TRADUCTEUR float()] ‚Üí NOMBRE 3.14
""")

print("\n" + "=" * 50)
print("2. CONVERSIONS VERS LES NOMBRES (int, float)")
print("=" * 50)

print("\nüî¢ CONVERSION VERS ENTIER - int()")
print("-" * 30)

# Exemple de base : convertir une cha√Æne en nombre entier
# int('123') # 123
ma_variable_entiere = "123"
print(
    f"Avant conversion : '{ma_variable_entiere}' (type: {type(ma_variable_entiere)})")

# convertir la chaine de caract√®res en nombre entier
ma_variable_entiere = int(ma_variable_entiere)
print(
    f"Apr√®s conversion : {ma_variable_entiere} (type: {type(ma_variable_entiere)})")

# üí° La fonction type() renvoie la classe de l'objet, c'est-√†-dire son type en tant qu'objet Python.

# Float vers entier (ATTENTION : perte de pr√©cision)
nombre_decimal = 3.7
nombre_tronque = int(nombre_decimal)
print(f"Float vers int : {nombre_decimal} ‚Üí {nombre_tronque} (TRONCATURE !)")

# Bool√©en vers entier
print(f"True ‚Üí {int(True)}")
print(f"False ‚Üí {int(False)}")

print("\nüî¢ CONVERSION VERS FLOTTANT - float()")
print("-" * 35)

# Les autres conversions
# convertir une cha√Æne en nombre flottant
ma_variable_flottante = "123.456"
print(
    f"Avant : '{ma_variable_flottante}' (type: {type(ma_variable_flottante)})")
ma_variable_flottante = float(ma_variable_flottante)
print(f"Apr√®s : {ma_variable_flottante} (type: {type(ma_variable_flottante)})")

# Entier vers float
entier = 42
flottant = float(entier)
print(f"Int vers float : {entier} ‚Üí {flottant}")

print("\n‚ö†Ô∏è ERREURS COURANTES √Ä √âVITER :")
print("   ‚ùå int('12.5')     # ERREUR ! Utiliser float() d'abord")
print("   ‚ùå int('abc')      # ERREUR ! Texte non num√©rique")
print("   ‚ùå float('hello')  # ERREUR ! Texte non num√©rique")

print("\n" + "=" * 50)
print("3. CONVERSIONS VERS LE TEXTE - str()")
print("=" * 50)

print("\nüìù TOUT PEUT DEVENIR DU TEXTE")
print("-" * 25)

# convertir un nombre entier en cha√Æne de caract√®res
ma_variable_entiere = 123
print(f"Entier ‚Üí Texte : {ma_variable_entiere} ‚Üí '{str(ma_variable_entiere)}'")
ma_variable_entiere = str(ma_variable_entiere)

# convertir un nombre flottant en cha√Æne de caract√®res
ma_variable_flottante = 123.456
print(
    f"Float ‚Üí Texte : {ma_variable_flottante} ‚Üí '{str(ma_variable_flottante)}'")
ma_variable_flottante = str(ma_variable_flottante)

# convertir un bool√©en en cha√Æne de caract√®res
ma_variable_booleenne = True
print(
    f"Boolean ‚Üí Texte : {ma_variable_booleenne} ‚Üí '{str(ma_variable_booleenne)}'")
ma_variable_booleenne = str(ma_variable_booleenne)

print("\nüí° USAGE PRATIQUE - Concat√©nation")
nom = "Alice"
age = 25
# Sans conversion : ERREUR !
# message = "Bonjour " + nom + ", vous avez " + age + " ans"  # ‚ùå
# Avec conversion : OK !
message = "Bonjour " + nom + ", vous avez " + str(age) + " ans"
print(f"Message : {message}")

# M√©thode moderne (f-strings, plus lisible)
message_moderne = f"Bonjour {nom}, vous avez {age} ans"
print(f"Avec f-string : {message_moderne}")
print("\n" + "=" * 50)
print("4. CONVERSIONS VERS BOOL√âEN - bool()")
print("=" * 50)

print("\nüîç R√àGLES DE CONVERSION VERS bool()")
print("-" * 35)

print("‚úÖ VALEURS 'VRAIES' (True) :")
# convertir une cha√Æne de caract√®res en bool√©en
ma_variable_chaine = "True"
ma_variable_booleenne = bool(ma_variable_chaine)
print(f"   bool('{ma_variable_chaine}') = {ma_variable_booleenne}  # True, car la cha√Æne n'est pas vide")

valeurs_vraies = [1, -1, 42, 3.14, "hello", [1, 2], {"a": 1}]
for valeur in valeurs_vraies:
    print(f"   bool({repr(valeur)}) = {bool(valeur)}")

print("\n‚ùå VALEURS 'FAUSSES' (False) :")
# convertir une cha√Æne vide en bool√©en
ma_variable_chaine_vide = ""
ma_variable_booleenne_vide = bool(ma_variable_chaine_vide)
print(f"   bool('{ma_variable_chaine_vide}') = {ma_variable_booleenne_vide}  # False, car la cha√Æne est vide")

# convertir un nombre entier en bool√©en
ma_variable_entiere = 0
ma_variable_booleenne = bool(ma_variable_entiere)
print(f"   bool({ma_variable_entiere}) = {ma_variable_booleenne}  # False, car 0 est consid√©r√© comme faux")

# convertir un nombre flottant en bool√©en
ma_variable_flottante = 0.0
ma_variable_booleenne_flottante = bool(ma_variable_flottante)
print(f"   bool({ma_variable_flottante}) = {ma_variable_booleenne_flottante}  # False, car 0.0 est consid√©r√© comme faux")

valeurs_fausses = [0, 0.0, "", [], {}, None]
for valeur in valeurs_fausses:
    print(f"   bool({repr(valeur)}) = {bool(valeur)}")

print("\n‚úÖ EXEMPLES POSITIFS :")
# convertir un nombre entier non nul en bool√©en
ma_variable_entiere_non_nul = 42
ma_variable_booleenne_non_nul = bool(ma_variable_entiere_non_nul)
print(f"   bool({ma_variable_entiere_non_nul}) = {ma_variable_booleenne_non_nul}  # True, car tout nombre entier non nul est consid√©r√© comme vrai")

# convertir un nombre flottant non nul en bool√©en
ma_variable_flottante_non_nul = 3.14
ma_variable_booleenne_flottante_non_nul = bool(ma_variable_flottante_non_nul)
print(f"   bool({ma_variable_flottante_non_nul}) = {ma_variable_booleenne_flottante_non_nul}  # True, car tout nombre flottant non nul est consid√©r√© comme vrai")

print("\nüí° M√âMO - Valeurs 'fausses' en Python :")
print("""
   ‚Ä¢ 0 (z√©ro entier)
   ‚Ä¢ 0.0 (z√©ro flottant)  
   ‚Ä¢ "" (cha√Æne vide)
   ‚Ä¢ [] (liste vide)
   ‚Ä¢ {} (dictionnaire vide)
   ‚Ä¢ None (valeur nulle)
   ‚Ä¢ False (√©videmment)
   
   ‚ö†Ô∏è PI√àGE : "False" (texte) = True car c'est une cha√Æne non vide !
""")

# D√©monstration du pi√®ge
texte_false = "False"
print(f"bool('{texte_false}') = {bool(texte_false)} (pi√®ge !)")

print("\n" + "=" * 50)
print("5. CONVERSIONS AVANC√âES ET CAS PARTICULIERS")
print("=" * 50)

print("\nüéØ CONVERSION DE LISTES")
print("-" * 20)

# convertir une liste en cha√Æne de caract√®res
ma_liste = [1, 2, 3]
ma_liste_chaine = str(ma_liste)
print(f"Liste ‚Üí Texte : {ma_liste} ‚Üí '{ma_liste_chaine}'")

# Liste de cha√Ænes vers liste de nombres
liste_textes = ["1", "2", "3", "4", "5"]
liste_nombres = [int(x) for x in liste_textes]
print(f"Textes : {liste_textes}")
print(f"Nombres : {liste_nombres}")

# Cha√Æne vers liste de caract√®res
phrase = "Python"
caracteres = list(phrase)
print(f"Phrase : '{phrase}'")
print(f"Caract√®res : {caracteres}")

print("\nüéØ CONVERSION DE NOMBRES AVEC BASES")
print("-" * 35)

# Nombres en diff√©rentes bases
nombre_decimal = 42
print(f"D√©cimal : {nombre_decimal}")
print(f"Binaire : {bin(nombre_decimal)}")
print(f"Hexad√©cimal : {hex(nombre_decimal)}")
print(f"Octal : {oct(nombre_decimal)}")

# Conversion depuis d'autres bases
binaire = "101010"
decimal_depuis_binaire = int(binaire, 2)
print(f"'{binaire}' en base 2 = {decimal_depuis_binaire} en d√©cimal")

print("\n" + "=" * 50)
print("6. GESTION DES ERREURS DE CONVERSION")
print("=" * 50)

print("\n‚ö†Ô∏è CONVERSIONS QUI PEUVENT √âCHOUER")
print("-" * 35)


def tenter_conversion(valeur, type_cible):
    """Fonction pour tester les conversions avec gestion d'erreur"""
    try:
        if type_cible == "int":
            resultat = int(valeur)
        elif type_cible == "float":
            resultat = float(valeur)
        else:
            resultat = type_cible(valeur)

        print(f"‚úÖ {type_cible}('{valeur}') = {resultat}")
        return resultat
    except ValueError as e:
        print(f"‚ùå {type_cible}('{valeur}') ‚Üí ERREUR : Conversion impossible")
        return None


# Tests de conversions
print("Tests de conversions s√ªres :")
tenter_conversion("123", "int")
tenter_conversion("12.5", "float")
tenter_conversion("hello", "int")
tenter_conversion("12.5", "int")

print("\nüí° SOLUTION : Validation avant conversion")


def convertir_securise(texte):
    """Conversion s√©curis√©e avec validation"""
    if texte.isdigit():
        return int(texte)
    elif texte.replace(".", "").replace("-", "").isdigit():
        return float(texte)
    else:
        return texte  # Garder comme texte


# Tests de conversion s√©curis√©e
valeurs_test = ["123", "12.5", "-42", "hello", "3.14159"]
print("\nConversions s√©curis√©es :")
for valeur in valeurs_test:
    resultat = convertir_securise(valeur)
    print(f"'{valeur}' ‚Üí {resultat} (type: {type(resultat).__name__})")

print("\n" + "=" * 50)
print("7. TABLEAU R√âCAPITULATIF DES CONVERSIONS")
print("=" * 50)

print("\nüìä GUIDE DE CONVERSION RAPIDE")
print("-" * 30)

conversions = [
    ["DE", "VERS", "FONCTION", "EXEMPLE"],
    ["str", "int", "int()", "'123' ‚Üí 123"],
    ["str", "float", "float()", "'12.5' ‚Üí 12.5"],
    ["str", "bool", "bool()", "'hello' ‚Üí True"],
    ["int", "str", "str()", "123 ‚Üí '123'"],
    ["int", "float", "float()", "42 ‚Üí 42.0"],
    ["int", "bool", "bool()", "0 ‚Üí False, autres ‚Üí True"],
    ["float", "str", "str()", "3.14 ‚Üí '3.14'"],
    ["float", "int", "int()", "3.7 ‚Üí 3 (troncature)"],
    ["float", "bool", "bool()", "0.0 ‚Üí False, autres ‚Üí True"],
    ["bool", "str", "str()", "True ‚Üí 'True'"],
    ["bool", "int", "int()", "True ‚Üí 1, False ‚Üí 0"],
    ["bool", "float", "float()", "True ‚Üí 1.0, False ‚Üí 0.0"],
]

for ligne in conversions:
    print(f"{ligne[0]:<8} {ligne[1]:<8} {ligne[2]:<10} {ligne[3]}")

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üîÑ CONVERSIONS DE BASE :
   ‚Ä¢ int() : Convertit vers entier
   ‚Ä¢ float() : Convertit vers nombre d√©cimal  
   ‚Ä¢ str() : Convertit vers texte
   ‚Ä¢ bool() : Convertit vers bool√©en

2. ‚ö†Ô∏è PI√àGES √Ä √âVITER :
   ‚Ä¢ input() retourne TOUJOURS du texte
   ‚Ä¢ int() tronque les d√©cimales (3.7 ‚Üí 3)
   ‚Ä¢ Cha√Ænes non-vides = True (m√™me "False" !)
   ‚Ä¢ V√©rifier avant de convertir

3. üõ°Ô∏è CONVERSION S√âCURIS√âE :
   ‚Ä¢ Utiliser try/except
   ‚Ä¢ V√©rifier avec .isdigit()
   ‚Ä¢ Valider les donn√©es utilisateur

4. üí° BONNES PRATIQUES :
   ‚Ä¢ F-strings au lieu de concat√©nation
   ‚Ä¢ isinstance() pour v√©rifier les types
   ‚Ä¢ Documentation des conversions
   ‚Ä¢ Gestion des cas d'erreur

5. üé® CONVERSIONS AVANC√âES :
   ‚Ä¢ Bases num√©riques (bin, hex, oct)
   ‚Ä¢ List comprehensions pour listes
   ‚Ä¢ Fonctions personnalis√©es de validation

‚úÖ FORMULE MAGIQUE pour d√©buter :
   input() ‚Üí int()/float() ‚Üí calculs ‚Üí str() ‚Üí affichage

üéâ F√©licitations ! Vous ma√Ætrisez les conversions Python !
üí° Prochaine √©tape : Les op√©rateurs et les calculs !
üìö Continuez avec 004_les_fonctions_str.py
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE")
print("=" * 70)
