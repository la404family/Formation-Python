#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
======================================================================
TRY/CATCH AVANC√â EN PYTHON - GUIDE COMPLET
======================================================================

üéØ Ce fichier couvre les techniques avanc√©es de gestion d'erreurs :
   ‚Ä¢ Patterns de gestion d'exceptions sophistiqu√©s
   ‚Ä¢ Exception chaining et context
   ‚Ä¢ Custom exception hierarchies
   ‚Ä¢ Error handling strategies
   ‚Ä¢ Monitoring et logging d'erreurs
   ‚Ä¢ Recovery patterns et resilience

üìö Concepts abord√©s :
   ‚Ä¢ Exception groups et handling avanc√©
   ‚Ä¢ Decorators pour error handling
   ‚Ä¢ Circuit breakers et retry patterns
   ‚Ä¢ Error aggregation et reporting
   ‚Ä¢ Graceful degradation
   ‚Ä¢ Fault tolerance architectures

üí° Objectif : Ma√Ætriser la gestion robuste des erreurs
"""

from contextlib import suppress
import os
import logging
import time
import traceback
from functools import wraps
from typing import List, Dict, Any, Optional, Callable
from dataclasses import dataclass
from datetime import datetime, timedelta
import json

print("=" * 70)
print("TRY/CATCH AVANC√â EN PYTHON - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. EXCEPTION CHAINING AVANC√â")
print("=" * 50)

print("\nüîó CHA√éNAGE D'EXCEPTIONS")
print("-" * 24)


class BusinessError(Exception):
    """Exception m√©tier de base"""

    def __init__(self, message: str, error_code: str = None, context: Dict = None):
        super().__init__(message)
        self.message = message
        self.error_code = error_code
        self.context = context or {}
        self.timestamp = datetime.now()


class ValidationError(BusinessError):
    """Erreur de validation"""
    pass


class DataProcessingError(BusinessError):
    """Erreur de traitement de donn√©es"""
    pass


class ExternalServiceError(BusinessError):
    """Erreur de service externe"""
    pass


def demo_exception_chaining():
    """D√©monstration du cha√Ænage d'exceptions avanc√©"""

    print("üîó Cha√Ænage d'exceptions avanc√© :")

    def valider_donnees(donnees):
        """Validation avec exceptions cha√Æn√©es"""
        try:
            if not isinstance(donnees, dict):
                raise TypeError(f"Dictionnaire attendu, re√ßu {type(donnees)}")

            if "email" not in donnees:
                raise KeyError("Champ 'email' manquant")

            email = donnees["email"]
            if "@" not in email:
                raise ValueError(f"Format email invalide : {email}")

        except (TypeError, KeyError, ValueError) as e:
            # Cha√Æner avec une exception m√©tier
            raise ValidationError(
                f"Validation √©chou√©e pour les donn√©es utilisateur",
                error_code="VALIDATION_FAILED",
                context={"donnees": str(donnees)[:100]}
            ) from e

    def traiter_utilisateur(donnees):
        """Traitement avec cha√Ænage √† plusieurs niveaux"""
        try:
            valider_donnees(donnees)

            # Simulation d'une erreur de traitement
            if donnees.get("nom") == "ERROR":
                raise RuntimeError("Erreur simul√©e de traitement")

            return {"status": "success", "user_id": 12345}

        except ValidationError:
            raise  # Re-propager sans modifier
        except Exception as e:
            # Cha√Æner avec une nouvelle exception m√©tier
            raise DataProcessingError(
                "Erreur lors du traitement utilisateur",
                error_code="PROCESSING_FAILED",
                context={"donnees": donnees}
            ) from e

    # Tests avec diff√©rents types d'erreurs
    test_cases = [
        ({"email": "test@example.com", "nom": "Alice"}, "Cas valide"),
        ({"nom": "Bob"}, "Email manquant"),
        ({"email": "invalid-email", "nom": "Charlie"}, "Email invalide"),
        ("not-a-dict", "Type incorrect"),
        ({"email": "test@example.com", "nom": "ERROR"}, "Erreur de traitement"),
    ]

    for donnees, description in test_cases:
        print(f"\n   Test : {description}")
        try:
            resultat = traiter_utilisateur(donnees)
            print(f"   ‚úÖ Succ√®s : {resultat}")
        except BusinessError as e:
            print(f"   ‚ùå {type(e).__name__} : {e.message}")
            print(f"      Code : {e.error_code}")
            print(f"      Contexte : {e.context}")

            # Afficher la cha√Æne d'exceptions
            current = e
            level = 0
            while current:
                print(
                    f"      {'  ' * level}‚Ü≥ {type(current).__name__}: {current}")
                current = current.__cause__
                level += 1


demo_exception_chaining()

print("\nüéØ EXCEPTION CONTEXT ET SUPPRESS")
print("-" * 33)


def demo_exception_context():
    """D√©monstration du contexte d'exception et suppress"""

    print("üéØ Exception context et suppress :")

    # Utilisation de suppress pour ignorer des exceptions sp√©cifiques
    print("\n   1Ô∏è‚É£ Suppression d'exceptions avec contextlib.suppress :")

    def operations_avec_suppress():
        """Op√©rations avec suppression s√©lective d'erreurs"""
        resultats = []

        # Tentatives d'op√©rations qui peuvent √©chouer
        operations = [
            lambda: int("123"),      # Succ√®s
            lambda: int("invalid"),  # ValueError
            lambda: 10 / 2,          # Succ√®s
            lambda: 10 / 0,          # ZeroDivisionError
            lambda: [1, 2, 3][1],      # Succ√®s
            lambda: [1, 2, 3][10],     # IndexError
        ]

        for i, operation in enumerate(operations):
            print(f"      Op√©ration {i+1} :", end=" ")

            # Supprimer certaines erreurs attendues
            with suppress(ValueError, ZeroDivisionError, IndexError):
                result = operation()
                resultats.append(result)
                print(f"‚úÖ R√©sultat: {result}")
                continue

            # Si on arrive ici, l'op√©ration a √©t√© supprim√©e
            print("‚ùå Erreur supprim√©e")
            resultats.append(None)

        return resultats

    resultats = operations_avec_suppress()
    print(f"      R√©sultats finaux : {resultats}")

    # Comparison avec gestion manuelle
    print("\n   2Ô∏è‚É£ Comparaison avec gestion manuelle :")

    def operations_manuelles():
        """M√™me chose avec gestion manuelle"""
        resultats = []

        operations = [
            lambda: int("123"),
            lambda: int("invalid"),
            lambda: 10 / 2,
            lambda: 10 / 0,
        ]

        for i, operation in enumerate(operations):
            try:
                result = operation()
                resultats.append(result)
                print(f"      Op√©ration {i+1} : ‚úÖ {result}")
            except (ValueError, ZeroDivisionError) as e:
                resultats.append(None)
                print(f"      Op√©ration {i+1} : ‚ùå {type(e).__name__}")

        return resultats

    resultats_manuels = operations_manuelles()
    print(f"      R√©sultats manuels : {resultats_manuels}")


demo_exception_context()

print("\n" + "=" * 50)
print("2. DECORATORS POUR ERROR HANDLING")
print("=" * 50)

print("\nüé® D√âCORATEURS DE GESTION D'ERREURS")
print("-" * 35)


def retry(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0,
          exceptions: tuple = (Exception,)):
    """D√©corateur de retry avec backoff exponentiel"""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            current_delay = delay

            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    if attempt == max_attempts - 1:
                        print(
                            f"   üí• √âchec d√©finitif apr√®s {max_attempts} tentatives")
                        raise

                    print(f"   ‚ùå Tentative {attempt + 1} √©chou√©e : {e}")
                    print(f"   ‚è≥ Attente de {current_delay:.1f}s avant retry")

                    time.sleep(current_delay)
                    current_delay *= backoff

            return None  # Ne devrait jamais arriver

        return wrapper
    return decorator


def handle_exceptions(*exception_types, default_return=None, log_errors=True):
    """D√©corateur pour gestion automatique d'exceptions"""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except exception_types as e:
                if log_errors:
                    print(
                        f"   üö® Exception g√©r√©e dans {func.__name__}: {type(e).__name__}: {e}")
                return default_return
            except Exception as e:
                if log_errors:
                    print(
                        f"   üí• Exception non g√©r√©e dans {func.__name__}: {type(e).__name__}: {e}")
                raise

        return wrapper
    return decorator


def measure_performance(include_errors=True):
    """D√©corateur pour mesurer les performances avec gestion d'erreurs"""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            success = True
            error_info = None

            try:
                result = func(*args, **kwargs)
                return result
            except Exception as e:
                success = False
                error_info = {"type": type(e).__name__, "message": str(e)}
                if include_errors:
                    raise
                return None
            finally:
                end_time = time.time()
                duration = end_time - start_time

                status = "‚úÖ SUCCESS" if success else "‚ùå ERROR"
                print(f"   üìä {func.__name__} : {status} en {duration:.3f}s")

                if error_info:
                    print(
                        f"      Erreur : {error_info['type']}: {error_info['message']}")

        return wrapper
    return decorator


def demo_decorators_error_handling():
    """D√©monstration des d√©corateurs de gestion d'erreurs"""

    print("üé® D√©corateurs de gestion d'erreurs :")

    # Fonction instable pour les tests
    call_count = 0

    @retry(max_attempts=3, delay=0.1, exceptions=(RuntimeError, ValueError))
    @measure_performance()
    def operation_instable(taux_succes=0.3):
        """Op√©ration qui √©choue souvent"""
        nonlocal call_count
        call_count += 1

        import random
        if random.random() < taux_succes:
            return f"Succ√®s √† l'appel {call_count}"
        else:
            raise RuntimeError(f"√âchec simul√© √† l'appel {call_count}")

    print("\n   1Ô∏è‚É£ Test du d√©corateur retry :")
    call_count = 0
    try:
        # Tr√®s faible chance de succ√®s
        resultat = operation_instable(taux_succes=0.1)
        print(f"   üéâ R√©sultat : {resultat}")
    except Exception as e:
        print(f"   üíÄ √âchec final : {e}")

    # Fonction avec gestion automatique d'erreurs
    @handle_exceptions(ValueError, TypeError, default_return="Erreur g√©r√©e")
    @measure_performance(include_errors=False)
    def operation_avec_gestion(valeur):
        """Op√©ration avec gestion automatique d'erreurs"""
        if valeur == "error":
            raise ValueError("Erreur de valeur simul√©e")
        elif valeur == "type_error":
            raise TypeError("Erreur de type simul√©e")
        elif valeur == "runtime_error":
            raise RuntimeError("Cette erreur ne sera pas g√©r√©e")
        else:
            return f"Traitement r√©ussi : {valeur.upper()}"

    print("\n   2Ô∏è‚É£ Test du d√©corateur handle_exceptions :")
    test_values = ["hello", "error", "type_error", "runtime_error"]

    for valeur in test_values:
        print(f"      Test avec '{valeur}' :", end=" ")
        try:
            resultat = operation_avec_gestion(valeur)
            print(f"R√©sultat: {resultat}")
        except Exception as e:
            print(f"Exception non g√©r√©e: {type(e).__name__}")


demo_decorators_error_handling()

print("\nüîß D√âCORATEUR DE VALIDATION")
print("-" * 26)


def validate_args(**validators):
    """D√©corateur de validation d'arguments"""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # R√©cup√©rer les noms des param√®tres
            import inspect
            sig = inspect.signature(func)
            bound_args = sig.bind(*args, **kwargs)
            bound_args.apply_defaults()

            # Valider chaque argument
            for param_name, validator in validators.items():
                if param_name in bound_args.arguments:
                    value = bound_args.arguments[param_name]

                    try:
                        if callable(validator):
                            if not validator(value):
                                raise ValidationError(
                                    f"Validation √©chou√©e pour {param_name}: {value}",
                                    error_code="VALIDATION_FAILED"
                                )
                        elif isinstance(validator, type):
                            if not isinstance(value, validator):
                                raise ValidationError(
                                    f"Type incorrect pour {param_name}: attendu {validator.__name__}, re√ßu {type(value).__name__}",
                                    error_code="TYPE_MISMATCH"
                                )
                    except ValidationError:
                        raise
                    except Exception as e:
                        raise ValidationError(
                            f"Erreur de validation pour {param_name}: {e}",
                            error_code="VALIDATION_ERROR"
                        ) from e

            return func(*args, **kwargs)

        return wrapper
    return decorator


def demo_validation_decorator():
    """Test du d√©corateur de validation"""

    print("üîß D√©corateur de validation :")

    @validate_args(
        nom=str,
        age=lambda x: isinstance(x, int) and 0 <= x <= 150,
        email=lambda x: isinstance(x, str) and "@" in x,
        actif=bool
    )
    def creer_utilisateur(nom: str, age: int, email: str, actif: bool = True):
        """Cr√©er un utilisateur avec validation automatique"""
        return {
            "nom": nom,
            "age": age,
            "email": email,
            "actif": actif,
            "id": hash(f"{nom}{email}") % 10000
        }

    # Tests de validation
    test_cases = [
        (("Alice", 25, "alice@test.com"), {}, "Cas valide"),
        (("Bob",), {"age": 30, "email": "bob@test.com"}, "Avec kwargs"),
        (("Charlie", -5, "charlie@test.com"), {}, "√Çge n√©gatif"),
        (("Diane", 30, "invalid-email"), {}, "Email invalide"),
        ((123, 25, "test@test.com"), {}, "Nom non-string"),
        (("Eve", "trente", "eve@test.com"), {}, "√Çge non-int"),
    ]

    for args, kwargs, description in test_cases:
        print(f"\n   Test : {description}")
        try:
            utilisateur = creer_utilisateur(*args, **kwargs)
            print(f"   ‚úÖ Utilisateur cr√©√© : {utilisateur}")
        except ValidationError as e:
            print(f"   ‚ùå Validation √©chou√©e : {e.message}")
            print(f"      Code : {e.error_code}")


demo_validation_decorator()

print("\n" + "=" * 50)
print("3. CIRCUIT BREAKER PATTERN")
print("=" * 50)

print("\n‚ö° CIRCUIT BREAKER AVANC√â")
print("-" * 26)


@dataclass
class CircuitBreakerStats:
    """Statistiques du circuit breaker"""
    total_calls: int = 0
    successful_calls: int = 0
    failed_calls: int = 0
    timeouts: int = 0
    last_failure_time: Optional[datetime] = None
    consecutive_failures: int = 0


class CircuitBreakerState:
    """√âtats du circuit breaker"""
    CLOSED = "CLOSED"      # Normal, laisse passer les appels
    OPEN = "OPEN"          # Bloque les appels apr√®s trop d'√©checs
    HALF_OPEN = "HALF_OPEN"  # Test de r√©cup√©ration


class AdvancedCircuitBreaker:
    """Circuit breaker avanc√© avec m√©triques et strat√©gies"""

    def __init__(self,
                 failure_threshold: int = 5,
                 timeout_seconds: float = 60.0,
                 expected_exceptions: tuple = (Exception,),
                 success_threshold: int = 3):
        self.failure_threshold = failure_threshold
        self.timeout_seconds = timeout_seconds
        self.expected_exceptions = expected_exceptions
        self.success_threshold = success_threshold

        self.state = CircuitBreakerState.CLOSED
        self.stats = CircuitBreakerStats()
        self.half_open_successes = 0

    def _should_attempt_reset(self) -> bool:
        """V√©rifier si on doit tenter de fermer le circuit"""
        if self.stats.last_failure_time is None:
            return False

        time_since_failure = datetime.now() - self.stats.last_failure_time
        return time_since_failure.total_seconds() >= self.timeout_seconds

    def _record_success(self):
        """Enregistrer un succ√®s"""
        self.stats.total_calls += 1
        self.stats.successful_calls += 1
        self.stats.consecutive_failures = 0

        if self.state == CircuitBreakerState.HALF_OPEN:
            self.half_open_successes += 1
            if self.half_open_successes >= self.success_threshold:
                self.state = CircuitBreakerState.CLOSED
                self.half_open_successes = 0
                print(f"   üîÑ Circuit ferm√© : service r√©tabli")

    def _record_failure(self, exception):
        """Enregistrer un √©chec"""
        self.stats.total_calls += 1
        self.stats.failed_calls += 1
        self.stats.consecutive_failures += 1
        self.stats.last_failure_time = datetime.now()

        if isinstance(exception, TimeoutError):
            self.stats.timeouts += 1

        if self.state == CircuitBreakerState.HALF_OPEN:
            self.state = CircuitBreakerState.OPEN
            self.half_open_successes = 0
            print(f"   üö® Circuit rouvert : nouvelle panne d√©tect√©e")
        elif (self.state == CircuitBreakerState.CLOSED and
              self.stats.consecutive_failures >= self.failure_threshold):
            self.state = CircuitBreakerState.OPEN
            print(
                f"   üö® Circuit ouvert : {self.stats.consecutive_failures} √©checs cons√©cutifs")

    def get_stats(self) -> Dict[str, Any]:
        """Obtenir les statistiques"""
        success_rate = 0
        if self.stats.total_calls > 0:
            success_rate = (self.stats.successful_calls /
                            self.stats.total_calls) * 100

        return {
            "state": self.state,
            "total_calls": self.stats.total_calls,
            "success_rate": f"{success_rate:.1f}%",
            "consecutive_failures": self.stats.consecutive_failures,
            "last_failure": self.stats.last_failure_time.isoformat() if self.stats.last_failure_time else None
        }

    def call(self, func, *args, **kwargs):
        """Appeler une fonction avec protection circuit breaker"""

        # V√©rifier l'√©tat du circuit
        if self.state == CircuitBreakerState.OPEN:
            if self._should_attempt_reset():
                self.state = CircuitBreakerState.HALF_OPEN
                print(f"   üîÑ Circuit semi-ouvert : test de r√©cup√©ration")
            else:
                raise RuntimeError(
                    f"Circuit breaker ouvert. "
                    f"Prochain test dans {self.timeout_seconds - (datetime.now() - self.stats.last_failure_time).total_seconds():.1f}s"
                )

        # Tenter l'appel
        try:
            result = func(*args, **kwargs)
            self._record_success()
            return result

        except self.expected_exceptions as e:
            self._record_failure(e)
            raise

    def __call__(self, func):
        """Utiliser comme d√©corateur"""
        @wraps(func)
        def wrapper(*args, **kwargs):
            return self.call(func, *args, **kwargs)
        return wrapper


def demo_circuit_breaker():
    """D√©monstration du circuit breaker avanc√©"""

    print("‚ö° Circuit breaker avanc√© :")

    # Cr√©er un circuit breaker
    cb = AdvancedCircuitBreaker(
        failure_threshold=3,
        timeout_seconds=2.0,
        success_threshold=2
    )

    # Service instable pour les tests
    call_counter = 0

    def service_instable(taux_echec=0.7):
        """Service qui √©choue selon un taux donn√©"""
        nonlocal call_counter
        call_counter += 1

        import random
        if random.random() < taux_echec:
            raise RuntimeError(f"Service indisponible (appel {call_counter})")

        return f"Service OK (appel {call_counter})"

    # Test avec taux d'√©chec √©lev√©
    print(f"\n   1Ô∏è‚É£ Test avec taux d'√©chec √©lev√© (70%) :")

    for i in range(10):
        try:
            result = cb.call(service_instable, taux_echec=0.7)
            print(f"   ‚úÖ Appel {i+1} : {result}")
        except Exception as e:
            print(f"   ‚ùå Appel {i+1} : {type(e).__name__}: {e}")

        # Afficher les stats p√©riodiquement
        if (i+1) % 3 == 0:
            stats = cb.get_stats()
            print(f"      üìä Stats : {stats}")

        time.sleep(0.1)

    # Attendre la r√©cup√©ration
    print(f"\n   2Ô∏è‚É£ Attente de r√©cup√©ration...")
    time.sleep(2.1)

    # Test avec taux d'√©chec plus faible
    print(f"   3Ô∏è‚É£ Test avec service am√©lior√© (20% √©chec) :")

    for i in range(5):
        try:
            result = cb.call(service_instable, taux_echec=0.2)
            print(f"   ‚úÖ Appel r√©cup√©ration {i+1} : {result}")
        except Exception as e:
            print(f"   ‚ùå Appel r√©cup√©ration {i+1} : {type(e).__name__}: {e}")

        time.sleep(0.1)

    # Stats finales
    stats_finales = cb.get_stats()
    print(f"\n   üìä Statistiques finales : {stats_finales}")


demo_circuit_breaker()

print("\n" + "=" * 50)
print("4. ERROR AGGREGATION ET REPORTING")
print("=" * 50)

print("\nüìä COLLECTE ET AGR√âGATION D'ERREURS")
print("-" * 35)


class ErrorCollector:
    """Collecteur d'erreurs avec agr√©gation et reporting"""

    def __init__(self):
        self.errors: List[Dict[str, Any]] = []
        self.error_counts: Dict[str, int] = {}
        self.start_time = datetime.now()

    def record_error(self,
                     exception: Exception,
                     context: Dict[str, Any] = None,
                     severity: str = "ERROR"):
        """Enregistrer une erreur"""

        error_info = {
            "timestamp": datetime.now().isoformat(),
            "type": type(exception).__name__,
            "message": str(exception),
            "severity": severity,
            "context": context or {},
            "traceback": traceback.format_exc() if hasattr(exception, '__traceback__') else None
        }

        self.errors.append(error_info)

        # Comptage par type
        error_type = type(exception).__name__
        self.error_counts[error_type] = self.error_counts.get(
            error_type, 0) + 1

    def get_error_summary(self) -> Dict[str, Any]:
        """Obtenir un r√©sum√© des erreurs"""
        total_errors = len(self.errors)
        uptime = (datetime.now() - self.start_time).total_seconds()

        # Top 5 des erreurs les plus fr√©quentes
        sorted_errors = sorted(self.error_counts.items(),
                               key=lambda x: x[1], reverse=True)
        top_errors = sorted_errors[:5]

        # Erreurs par niveau de s√©v√©rit√©
        severity_counts = {}
        for error in self.errors:
            severity = error["severity"]
            severity_counts[severity] = severity_counts.get(severity, 0) + 1

        # Erreurs r√©centes (derni√®re heure)
        one_hour_ago = datetime.now() - timedelta(hours=1)
        recent_errors = [
            error for error in self.errors
            if datetime.fromisoformat(error["timestamp"]) > one_hour_ago
        ]

        return {
            "total_errors": total_errors,
            "uptime_seconds": uptime,
            "errors_per_hour": len(recent_errors),
            "top_error_types": top_errors,
            "severity_breakdown": severity_counts,
            "recent_errors_count": len(recent_errors)
        }

    def get_detailed_report(self) -> str:
        """G√©n√©rer un rapport d√©taill√©"""
        summary = self.get_error_summary()

        report = [
            "=" * 50,
            "RAPPORT D'ERREURS D√âTAILL√â",
            "=" * 50,
            f"P√©riode : {self.start_time.strftime('%Y-%m-%d %H:%M:%S')} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"Dur√©e : {summary['uptime_seconds']:.1f} secondes",
            f"Total erreurs : {summary['total_errors']}",
            f"Erreurs par heure : {summary['errors_per_hour']}",
            "",
            "TOP ERREURS :",
        ]

        for error_type, count in summary["top_error_types"]:
            percentage = (count / summary["total_errors"]) * 100
            report.append(f"  ‚Ä¢ {error_type}: {count} ({percentage:.1f}%)")

        report.extend([
            "",
            "R√âPARTITION PAR S√âV√âRIT√â :",
        ])

        for severity, count in summary["severity_breakdown"].items():
            report.append(f"  ‚Ä¢ {severity}: {count}")

        if summary["recent_errors_count"] > 0:
            report.extend([
                "",
                "ERREURS R√âCENTES (derni√®re heure) :",
            ])

            one_hour_ago = datetime.now() - timedelta(hours=1)
            recent_errors = [
                error for error in self.errors[-10:]  # 10 derni√®res
                if datetime.fromisoformat(error["timestamp"]) > one_hour_ago
            ]

            for error in recent_errors:
                timestamp = error["timestamp"].split(
                    ".")[0]  # Sans microsecondes
                report.append(
                    f"  ‚Ä¢ [{timestamp}] {error['type']}: {error['message']}")

        return "\n".join(report)


class ErrorHandler:
    """Gestionnaire d'erreurs avec collecte automatique"""

    def __init__(self):
        self.collector = ErrorCollector()

    def handle_error(self, exception: Exception, context: Dict[str, Any] = None,
                     severity: str = "ERROR", re_raise: bool = True):
        """G√©rer une erreur avec collecte automatique"""

        self.collector.record_error(exception, context, severity)

        # Log l'erreur
        print(f"   üö® [{severity}] {type(exception).__name__}: {exception}")
        if context:
            print(f"      Context: {context}")

        if re_raise:
            raise exception

    def safe_execute(self, func, *args, **kwargs):
        """Ex√©cuter une fonction avec gestion d'erreurs automatique"""
        try:
            return func(*args, **kwargs)
        except Exception as e:
            context = {
                "function": func.__name__,
                "args": str(args)[:100],
                "kwargs": str(kwargs)[:100]
            }
            self.handle_error(e, context, re_raise=False)
            return None

    def get_summary(self):
        """Obtenir le r√©sum√© des erreurs"""
        return self.collector.get_error_summary()

    def get_report(self):
        """Obtenir le rapport d√©taill√©"""
        return self.collector.get_detailed_report()


def demo_error_aggregation():
    """D√©monstration de l'agr√©gation d'erreurs"""

    print("üìä Collecte et agr√©gation d'erreurs :")

    error_handler = ErrorHandler()

    # Simuler diff√©rents types d'erreurs
    def fonction_qui_echoue(error_type):
        """Fonction qui g√©n√®re diff√©rents types d'erreurs"""
        if error_type == "value":
            raise ValueError("Valeur incorrecte")
        elif error_type == "type":
            raise TypeError("Type incorrect")
        elif error_type == "runtime":
            raise RuntimeError("Erreur d'ex√©cution")
        elif error_type == "custom":
            raise BusinessError("Erreur m√©tier", error_code="BIZ_001")
        else:
            return f"Succ√®s pour {error_type}"

    # G√©n√©rer plusieurs erreurs
    print("\n   1Ô∏è‚É£ G√©n√©ration d'erreurs multiples :")

    test_scenarios = [
        ("value", {"user_id": 123, "action": "validation"}),
        ("success", {"user_id": 456, "action": "normal"}),
        ("type", {"user_id": 789, "action": "conversion"}),
        ("value", {"user_id": 101, "action": "validation"}),  # R√©p√©tition
        ("runtime", {"user_id": 102, "action": "processing"}),
        ("custom", {"user_id": 103, "action": "business_logic"}),
        ("type", {"user_id": 104, "action": "conversion"}),  # R√©p√©tition
    ]

    for error_type, context in test_scenarios:
        result = error_handler.safe_execute(fonction_qui_echoue, error_type)
        if result:
            print(f"   ‚úÖ {error_type}: {result}")

    # Afficher le r√©sum√©
    print("\n   2Ô∏è‚É£ R√©sum√© des erreurs :")
    summary = error_handler.get_summary()
    for key, value in summary.items():
        print(f"      {key}: {value}")

    # Rapport d√©taill√©
    print("\n   3Ô∏è‚É£ Rapport d√©taill√© :")
    report = error_handler.get_report()
    print(report)


demo_error_aggregation()

print("\n" + "=" * 50)
print("5. GRACEFUL DEGRADATION")
print("=" * 50)

print("\nüõ°Ô∏è STRAT√âGIES DE D√âGRADATION GRACIEUSE")
print("-" * 39)


class ServiceLevel:
    """Niveaux de service pour d√©gradation gracieuse"""
    FULL = "FULL"           # Service complet
    DEGRADED = "DEGRADED"   # Service d√©grad√©
    LIMITED = "LIMITED"     # Service limit√©
    OFFLINE = "OFFLINE"     # Service hors ligne


class GracefulService:
    """Service avec d√©gradation gracieuse"""

    def __init__(self, name: str):
        self.name = name
        self.level = ServiceLevel.FULL
        self.error_count = 0
        self.error_threshold = 3
        self.degradation_timeout = 5.0
        self.last_error_time = None
        self.fallback_data = {}

    def _update_service_level(self):
        """Mettre √† jour le niveau de service bas√© sur les erreurs"""
        if self.error_count == 0:
            self.level = ServiceLevel.FULL
        elif self.error_count < self.error_threshold:
            self.level = ServiceLevel.DEGRADED
        elif self.error_count < self.error_threshold * 2:
            self.level = ServiceLevel.LIMITED
        else:
            self.level = ServiceLevel.OFFLINE

    def _should_recover(self) -> bool:
        """V√©rifier si le service peut tenter de r√©cup√©rer"""
        if self.last_error_time is None:
            return True

        time_since_error = time.time() - self.last_error_time
        return time_since_error > self.degradation_timeout

    def _record_error(self):
        """Enregistrer une erreur"""
        self.error_count += 1
        self.last_error_time = time.time()
        self._update_service_level()
        print(
            f"   ‚ö†Ô∏è Service {self.name} d√©grad√© : niveau {self.level} ({self.error_count} erreurs)")

    def _record_success(self):
        """Enregistrer un succ√®s"""
        if self.error_count > 0:
            self.error_count = max(0, self.error_count - 1)
            old_level = self.level
            self._update_service_level()
            if old_level != self.level:
                print(
                    f"   ‚úÖ Service {self.name} am√©lior√© : niveau {self.level}")

    def call_with_fallback(self, primary_func, fallback_func=None, *args, **kwargs):
        """Appeler une fonction avec fallback selon le niveau de service"""

        # Tentative de r√©cup√©ration
        if self.level != ServiceLevel.FULL and self._should_recover():
            print(f"   üîÑ Tentative de r√©cup√©ration pour {self.name}")

        # Selon le niveau de service
        if self.level == ServiceLevel.OFFLINE:
            print(
                f"   üíÄ Service {self.name} hors ligne - utilisation du cache")
            return self.fallback_data.get("last_result", "Service indisponible")

        try:
            # Appel principal avec adaptations selon le niveau
            if self.level == ServiceLevel.LIMITED:
                # Mode limit√© : timeout r√©duit, fonctionnalit√©s de base seulement
                print(f"   ‚ö° Service {self.name} en mode limit√©")
                kwargs.setdefault('timeout', 1.0)
            elif self.level == ServiceLevel.DEGRADED:
                # Mode d√©grad√© : moins de fonctionnalit√©s
                print(f"   ‚ö†Ô∏è Service {self.name} en mode d√©grad√©")
                kwargs.setdefault('timeout', 2.0)

            result = primary_func(*args, **kwargs)
            self._record_success()

            # Sauvegarder pour le cache
            self.fallback_data["last_result"] = result

            return result

        except Exception as e:
            print(f"   ‚ùå Erreur dans {self.name}: {e}")
            self._record_error()

            # Utiliser le fallback si disponible
            if fallback_func:
                try:
                    print(f"   üîÑ Utilisation du fallback pour {self.name}")
                    fallback_result = fallback_func(*args, **kwargs)
                    return fallback_result
                except Exception as fallback_error:
                    print(f"   üí• Fallback √©chou√©: {fallback_error}")

            # Dernier recours : donn√©es en cache
            if "last_result" in self.fallback_data:
                print(f"   üíæ Utilisation des donn√©es en cache")
                return self.fallback_data["last_result"]

            # Si tout √©choue
            if self.level == ServiceLevel.LIMITED:
                return "Service temporairement indisponible"
            else:
                raise


def demo_graceful_degradation():
    """D√©monstration de la d√©gradation gracieuse"""

    print("üõ°Ô∏è D√©gradation gracieuse de services :")

    # Service de g√©olocalisation
    geo_service = GracefulService("G√©olocalisation")

    def get_location_full(user_id, timeout=5.0):
        """Service de g√©olocalisation complet"""
        import random

        # Simuler des pannes al√©atoirement
        if random.random() < 0.4:  # 40% de chance d'√©chec
            raise RuntimeError("Service de g√©olocalisation indisponible")

        # Simuler timeout
        if timeout < 2.0:
            raise TimeoutError("Timeout du service de g√©olocalisation")

        return {
            "user_id": user_id,
            "latitude": 48.8566 + random.uniform(-0.1, 0.1),
            "longitude": 2.3522 + random.uniform(-0.1, 0.1),
            "accuracy": "high",
            "timestamp": datetime.now().isoformat()
        }

    def get_location_fallback(user_id, **kwargs):
        """Fallback : g√©olocalisation approximative"""
        return {
            "user_id": user_id,
            "latitude": 48.8566,  # Paris par d√©faut
            "longitude": 2.3522,
            "accuracy": "low",
            "source": "fallback",
            "timestamp": datetime.now().isoformat()
        }

    # Tests de d√©gradation
    print("\n   1Ô∏è‚É£ Tests de d√©gradation progressive :")

    for i in range(10):
        try:
            location = geo_service.call_with_fallback(
                get_location_full,
                get_location_fallback,
                user_id=f"user_{i+1}"
            )
            print(
                f"   üìç Appel {i+1}: {location['accuracy']} accuracy - {location.get('source', 'primary')}")

        except Exception as e:
            print(f"   üí• Appel {i+1}: √âchec total - {e}")

        time.sleep(0.1)

    # √âtat final du service
    print(f"\n   üìä √âtat final du service:")
    print(f"      Niveau: {geo_service.level}")
    print(f"      Erreurs: {geo_service.error_count}")
    print(
        f"      Cache disponible: {'last_result' in geo_service.fallback_data}")


demo_graceful_degradation()

print("\n" + "=" * 50)
print("6. MONITORING ET ALERTES")
print("=" * 50)

print("\nüìà SYST√àME DE MONITORING D'ERREURS")
print("-" * 35)


class ErrorMonitor:
    """Syst√®me de monitoring et d'alertes pour erreurs"""

    def __init__(self):
        self.metrics = {
            "error_rate": [],
            "response_times": [],
            "error_types": {},
            "alerts_sent": 0
        }
        self.alert_thresholds = {
            "error_rate": 0.1,      # 10% d'erreurs
            "avg_response_time": 5.0,  # 5 secondes
            "error_spike": 5         # 5 erreurs en 1 minute
        }
        self.alert_cooldown = 60  # 1 minute entre alertes
        self.last_alert_time = 0

    def record_request(self, success: bool, response_time: float, error_type: str = None):
        """Enregistrer une requ√™te"""
        timestamp = time.time()

        # M√©triques de base
        self.metrics["error_rate"].append({
            "timestamp": timestamp,
            "success": success
        })

        self.metrics["response_times"].append({
            "timestamp": timestamp,
            "duration": response_time
        })

        # Types d'erreurs
        if not success and error_type:
            self.metrics["error_types"][error_type] = \
                self.metrics["error_types"].get(error_type, 0) + 1

        # Nettoyer les vieilles donn√©es (garde 5 minutes)
        cutoff = timestamp - 300
        self.metrics["error_rate"] = [
            m for m in self.metrics["error_rate"]
            if m["timestamp"] > cutoff
        ]
        self.metrics["response_times"] = [
            m for m in self.metrics["response_times"]
            if m["timestamp"] > cutoff
        ]

        # V√©rifier les alertes
        self._check_alerts()

    def _check_alerts(self):
        """V√©rifier si des alertes doivent √™tre envoy√©es"""
        now = time.time()

        # Cooldown des alertes
        if now - self.last_alert_time < self.alert_cooldown:
            return

        alerts = []

        # Taux d'erreur
        if len(self.metrics["error_rate"]) >= 10:  # Minimum 10 requ√™tes
            errors = sum(
                1 for m in self.metrics["error_rate"] if not m["success"])
            error_rate = errors / len(self.metrics["error_rate"])

            if error_rate > self.alert_thresholds["error_rate"]:
                alerts.append(f"Taux d'erreur √©lev√©: {error_rate:.1%}")

        # Temps de r√©ponse moyen
        if len(self.metrics["response_times"]) >= 10:
            avg_time = sum(m["duration"] for m in self.metrics["response_times"]
                           ) / len(self.metrics["response_times"])

            if avg_time > self.alert_thresholds["avg_response_time"]:
                alerts.append(f"Temps de r√©ponse lent: {avg_time:.2f}s")

        # Pic d'erreurs
        recent_errors = sum(
            1 for m in self.metrics["error_rate"]
            if not m["success"] and now - m["timestamp"] < 60
        )

        if recent_errors >= self.alert_thresholds["error_spike"]:
            alerts.append(f"Pic d'erreurs: {recent_errors} en 1 minute")

        # Envoyer les alertes
        if alerts:
            self._send_alert(alerts)

    def _send_alert(self, alerts: List[str]):
        """Envoyer une alerte"""
        self.last_alert_time = time.time()
        self.metrics["alerts_sent"] += 1

        print(f"   üö® ALERTE #{self.metrics['alerts_sent']} :")
        for alert in alerts:
            print(f"      ‚Ä¢ {alert}")
        print(f"      Timestamp: {datetime.now().strftime('%H:%M:%S')}")

    def get_dashboard(self) -> str:
        """G√©n√©rer un dashboard de monitoring"""
        now = time.time()

        # Calculs des m√©triques
        total_requests = len(self.metrics["error_rate"])
        if total_requests == 0:
            return "Aucune donn√©e disponible"

        successful = sum(1 for m in self.metrics["error_rate"] if m["success"])
        error_rate = (total_requests - successful) / total_requests

        avg_response_time = 0
        if self.metrics["response_times"]:
            avg_response_time = sum(
                m["duration"] for m in self.metrics["response_times"]) / len(self.metrics["response_times"])

        # Top erreurs
        top_errors = sorted(self.metrics["error_types"].items(
        ), key=lambda x: x[1], reverse=True)[:3]

        dashboard = [
            "=" * 40,
            "üìä DASHBOARD DE MONITORING",
            "=" * 40,
            f"‚è±Ô∏è  P√©riode: derni√®res {len(self.metrics['error_rate'])} requ√™tes",
            f"‚úÖ Taux de succ√®s: {(1-error_rate):.1%}",
            f"‚ùå Taux d'erreur: {error_rate:.1%}",
            f"‚ö° Temps de r√©ponse moyen: {avg_response_time:.2f}s",
            f"üö® Alertes envoy√©es: {self.metrics['alerts_sent']}",
            "",
            "üîù TOP ERREURS:"
        ]

        for error_type, count in top_errors:
            dashboard.append(f"   ‚Ä¢ {error_type}: {count}")

        if not top_errors:
            dashboard.append("   Aucune erreur r√©cente")

        return "\n".join(dashboard)


def demo_error_monitoring():
    """D√©monstration du monitoring d'erreurs"""

    print("üìà Syst√®me de monitoring d'erreurs :")

    monitor = ErrorMonitor()

    # Simuler des requ√™tes avec diff√©rents patterns
    def simulate_requests():
        """Simuler des requ√™tes avec diff√©rents profils"""
        import random

        scenarios = [
            # Phase normale
            {"success_rate": 0.95, "avg_time": 1.0,
                "requests": 20, "name": "Normal"},
            # D√©gradation
            {"success_rate": 0.8, "avg_time": 3.0,
                "requests": 15, "name": "D√©grad√©"},
            # Incident
            {"success_rate": 0.5, "avg_time": 8.0,
                "requests": 10, "name": "Incident"},
            # R√©cup√©ration
            {"success_rate": 0.9, "avg_time": 2.0,
                "requests": 15, "name": "R√©cup√©ration"},
        ]

        error_types = ["TimeoutError", "ConnectionError",
                       "ValueError", "RuntimeError"]

        for scenario in scenarios:
            print(f"\n   üìã Phase: {scenario['name']}")

            for i in range(scenario["requests"]):
                # D√©terminer si succ√®s ou √©chec
                success = random.random() < scenario["success_rate"]

                # Temps de r√©ponse
                base_time = scenario["avg_time"]
                response_time = max(0.1, random.gauss(
                    base_time, base_time * 0.3))

                # Type d'erreur si √©chec
                error_type = None if success else random.choice(error_types)

                # Enregistrer la requ√™te
                monitor.record_request(success, response_time, error_type)

                # Affichage occasionnel
                if i % 5 == 0:
                    status = "‚úÖ" if success else "‚ùå"
                    print(
                        f"      Requ√™te {i+1}: {status} {response_time:.2f}s")

                time.sleep(0.05)  # Petite pause

    # Lancer la simulation
    print("\n   üé¨ Simulation de trafic avec monitoring :")
    simulate_requests()

    # Afficher le dashboard final
    print("\n   üìä Dashboard final :")
    dashboard = monitor.get_dashboard()
    print(dashboard)


demo_error_monitoring()

print("\n" + "=" * 50)
print("7. EXERCICES PRATIQUES")
print("=" * 50)

print("""
üí™ EXERCICES √Ä IMPL√âMENTER :

üéØ Exercice 1 : Syst√®me de Health Check
Cr√©ez un syst√®me de surveillance de sant√© :
‚Ä¢ Health checks pour services externes
‚Ä¢ Agr√©gation de statuts avec poids
‚Ä¢ Dashboard temps r√©el
‚Ä¢ Alertes configurables par seuil
‚Ä¢ Historique et tendances

üîß Exercice 2 : Framework de Retry Intelligent
Cr√©ez un syst√®me de retry avanc√© :
‚Ä¢ Strat√©gies multiples (linear, exponential, fibonacci)
‚Ä¢ Retry bas√© sur type d'exception
‚Ä¢ Jitter pour √©viter thundering herd
‚Ä¢ Circuit breaker int√©gr√©
‚Ä¢ M√©triques et observabilit√©

üéÆ Exercice 3 : Error Recovery System
Cr√©ez un syst√®me de r√©cup√©ration automatique :
‚Ä¢ D√©tection de patterns d'erreurs
‚Ä¢ Actions correctives automatiques
‚Ä¢ Escalation vers humains
‚Ä¢ Machine learning pour pr√©diction
‚Ä¢ Self-healing capabilities

‚ö° Exercice 4 : Distributed Error Tracking
Cr√©ez un syst√®me de tracking distribu√© :
‚Ä¢ Corr√©lation d'erreurs entre services
‚Ä¢ Trace IDs et spans
‚Ä¢ Causality tracking
‚Ä¢ Impact analysis
‚Ä¢ Root cause analysis automatique

üåê Exercice 5 : Chaos Engineering Framework
Cr√©ez un framework de chaos engineering :
‚Ä¢ Injection d'erreurs contr√¥l√©e
‚Ä¢ Simulation de pannes r√©seau
‚Ä¢ Test de r√©silience automatis√©
‚Ä¢ Metrics de r√©cup√©ration
‚Ä¢ Game days orchestr√©s
""")

print("\n" + "=" * 50)
print("8. R√âSUM√â FINAL")
print("=" * 50)

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üîó EXCEPTION CHAINING AVANC√â :
   ‚Ä¢ Exception context avec from pour debugging
   ‚Ä¢ Custom exception hierarchies pour m√©tier
   ‚Ä¢ Pr√©servation du stack trace original
   ‚Ä¢ Enrichissement avec contexte business

2. üé® D√âCORATEURS POUR ERROR HANDLING :
   ‚Ä¢ @retry avec backoff configurable
   ‚Ä¢ @handle_exceptions pour gestion automatique
   ‚Ä¢ @validate_args pour validation pr√©coce
   ‚Ä¢ Composition de d√©corateurs pour robustesse

3. ‚ö° CIRCUIT BREAKER PATTERN :
   ‚Ä¢ √âtats CLOSED/OPEN/HALF_OPEN
   ‚Ä¢ M√©triques et seuils configurables
   ‚Ä¢ Recovery automatique et test
   ‚Ä¢ Protection contre cascades de pannes

4. üìä ERROR AGGREGATION :
   ‚Ä¢ Collecte centralis√©e des erreurs
   ‚Ä¢ M√©triques temps r√©el et historiques
   ‚Ä¢ Alertes bas√©es sur seuils
   ‚Ä¢ Reporting et dashboards

5. üõ°Ô∏è GRACEFUL DEGRADATION :
   ‚Ä¢ Niveaux de service d√©grad√©s
   ‚Ä¢ Fallbacks et donn√©es en cache
   ‚Ä¢ Recovery automatique
   ‚Ä¢ Pr√©servation de l'exp√©rience utilisateur

üí° PATTERNS AVANC√âS :
‚úÖ Exception chaining pour contexte complet
‚úÖ D√©corateurs composables pour error handling
‚úÖ Circuit breakers pour r√©silience
‚úÖ Monitoring proactif avec alertes
‚úÖ D√©gradation gracieuse des services
‚úÖ Recovery automatique et self-healing

üö® ANTI-PATTERNS √Ä √âVITER :
‚ùå Exceptions g√©n√©riques sans contexte
‚ùå Retry sans backoff (thundering herd)
‚ùå Masquage d'erreurs importantes
‚ùå Pas de monitoring des erreurs
‚ùå Failure sans fallback
‚ùå Recovery sans validation

‚ö° ARCHITECTURE R√âSILIENTE :
‚Ä¢ S√©paration des pr√©occupations d'erreur
‚Ä¢ Observabilit√© et m√©triques compl√®tes
‚Ä¢ Fault isolation et containment
‚Ä¢ Auto-scaling bas√© sur health
‚Ä¢ Graceful shutdown et startup

üîß OUTILS ET FRAMEWORKS :
‚Ä¢ APM (Application Performance Monitoring)
‚Ä¢ Distributed tracing (Jaeger, Zipkin)
‚Ä¢ Circuit breakers (Hystrix, Resilience4j)
‚Ä¢ Chaos engineering (Chaos Monkey)
‚Ä¢ Error tracking (Sentry, Rollbar)

üéØ STRAT√âGIES DE PRODUCTION :
‚Ä¢ Error budgets et SLOs
‚Ä¢ Incident response automatis√©
‚Ä¢ Postmortem et learning culture
‚Ä¢ Chaos engineering r√©gulier
‚Ä¢ Continuous resilience testing

üîç OBSERVABILIT√â :
‚Ä¢ M√©triques d'erreurs en temps r√©el
‚Ä¢ Logs structur√©s avec corr√©lation
‚Ä¢ Traces distribu√©es pour debugging
‚Ä¢ Alertes proactives et smart
‚Ä¢ Dashboards pour visibility

üéâ F√©licitations ! Error handling avanc√© ma√Ætris√© !
üí° Prochaine √©tape : Programmation orient√©e objet !
üìö Erreurs sous contr√¥le, programmez en OOP !
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE - TRY/CATCH AVANC√â MA√éTRIS√â !")
print("=" * 70)
