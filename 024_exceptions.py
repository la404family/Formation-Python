#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
======================================================================
EXCEPTIONS EN PYTHON - GUIDE COMPLET
======================================================================

üéØ Ce fichier couvre la gestion des exceptions de base :
   ‚Ä¢ try, except, else, finally
   ‚Ä¢ Types d'exceptions courantes
   ‚Ä¢ Syntaxe et bonnes pratiques
   ‚Ä¢ Gestion d'erreurs multiples
   ‚Ä¢ Debugging avec les exceptions

üìö Concepts abord√©s :
   ‚Ä¢ Structure try/except/else/finally
   ‚Ä¢ Hi√©rarchie des exceptions Python
   ‚Ä¢ Capture sp√©cifique vs g√©n√©rale
   ‚Ä¢ Propagation d'exceptions
   ‚Ä¢ Messages d'erreur informatifs

üí° Objectif : Ma√Ætriser la gestion d'erreurs de base
"""

print("=" * 70)
print("EXCEPTIONS EN PYTHON - GUIDE COMPLET")
print("=" * 70)

print("\n" + "=" * 50)
print("1. STRUCTURE TRY/EXCEPT DE BASE")
print("=" * 50)

print("\nüö® GESTION D'ERREURS SIMPLE")
print("-" * 26)


def demo_try_except_simple():
    """D√©monstration de la structure try/except de base"""

    print("üö® Try/except simple :")

    # Exemple 1 : Division par z√©ro
    print("\n   1Ô∏è‚É£ Division par z√©ro :")
    try:
        resultat = 10 / 0
        print(f"   R√©sultat : {resultat}")
    except ZeroDivisionError:
        print("   ‚ùå Erreur : Division par z√©ro impossible !")

    # Exemple 2 : Conversion invalide
    print("\n   2Ô∏è‚É£ Conversion invalide :")
    try:
        nombre = int("abc")
        print(f"   Nombre converti : {nombre}")
    except ValueError:
        print("   ‚ùå Erreur : Impossible de convertir 'abc' en entier !")

    # Exemple 3 : Acc√®s √† un index inexistant
    print("\n   3Ô∏è‚É£ Index hors limites :")
    liste = [1, 2, 3]
    try:
        element = liste[10]
        print(f"   √âl√©ment √† l'index 10 : {element}")
    except IndexError:
        print("   ‚ùå Erreur : Index 10 hors limites !")

    # Exemple 4 : Acc√®s √† une cl√© inexistante
    print("\n   4Ô∏è‚É£ Cl√© de dictionnaire inexistante :")
    dictionnaire = {"nom": "Alice", "age": 25}
    try:
        ville = dictionnaire["ville"]
        print(f"   Ville : {ville}")
    except KeyError:
        print("   ‚ùå Erreur : Cl√© 'ville' inexistante !")


demo_try_except_simple()

print("\nüîß GESTION D'EXCEPTIONS MULTIPLES")
print("-" * 32)


def demo_exceptions_multiples():
    """D√©monstration de la gestion d'exceptions multiples"""

    print("üîß Exceptions multiples :")

    def calculer_moyenne(valeurs_str):
        """Calculer la moyenne d'une liste de cha√Ænes num√©riques"""
        try:
            # Conversion des cha√Ænes en nombres
            valeurs = [float(v) for v in valeurs_str]

            # Calcul de la moyenne
            moyenne = sum(valeurs) / len(valeurs)

            return moyenne

        except ValueError as e:
            print(f"   ‚ùå Erreur de conversion : {e}")
            return None
        except ZeroDivisionError:
            print("   ‚ùå Erreur : Liste vide, impossible de calculer la moyenne")
            return None
        except TypeError as e:
            print(f"   ‚ùå Erreur de type : {e}")
            return None

    # Tests avec diff√©rents types d'erreurs
    test_cases = [
        (["10", "20", "30"], "Valeurs valides"),
        (["10", "abc", "30"], "Valeur invalide"),
        ([], "Liste vide"),
        (None, "Type incorrect"),
        (["10.5", "20.7", "15.2"], "Nombres d√©cimaux"),
    ]

    for valeurs, description in test_cases:
        print(f"\n   Test : {description}")
        print(f"   Donn√©es : {valeurs}")

        resultat = calculer_moyenne(valeurs)
        if resultat is not None:
            print(f"   ‚úÖ Moyenne : {resultat:.2f}")
        else:
            print("   üíÄ Calcul impossible")


demo_exceptions_multiples()

print("\n" + "=" * 50)
print("2. STRUCTURE COMPL√àTE TRY/EXCEPT/ELSE/FINALLY")
print("=" * 50)

print("\nüèóÔ∏è STRUCTURE COMPL√àTE")
print("-" * 20)


def demo_structure_complete():
    """D√©monstration de try/except/else/finally"""

    print("üèóÔ∏è Structure compl√®te try/except/else/finally :")

    def traiter_fichier(nom_fichier, contenu=None):
        """Exemple de traitement de fichier avec structure compl√®te"""
        fichier = None

        try:
            print(f"   üìÇ Tentative d'ouverture du fichier '{nom_fichier}'")

            if contenu is not None:
                # Mode √©criture
                fichier = open(nom_fichier, 'w', encoding='utf-8')
                fichier.write(contenu)
            else:
                # Mode lecture
                fichier = open(nom_fichier, 'r', encoding='utf-8')
                contenu_lu = fichier.read()
                return contenu_lu

        except FileNotFoundError:
            print(f"   ‚ùå Fichier '{nom_fichier}' introuvable")
            return None
        except PermissionError:
            print(f"   ‚ùå Permissions insuffisantes pour '{nom_fichier}'")
            return None
        except IOError as e:
            print(f"   ‚ùå Erreur d'E/S : {e}")
            return None
        else:
            # Ex√©cut√© seulement si aucune exception n'a √©t√© lev√©e
            print(f"   ‚úÖ Op√©ration sur '{nom_fichier}' r√©ussie")
            return "Op√©ration r√©ussie"
        finally:
            # Toujours ex√©cut√©, m√™me en cas d'exception
            if fichier:
                fichier.close()
                print(f"   üîí Fichier '{nom_fichier}' ferm√©")
            else:
                print(f"   ‚ö†Ô∏è Aucun fichier √† fermer")

    # Tests de la structure compl√®te
    print("\n   1Ô∏è‚É£ Test √©criture de fichier :")
    traiter_fichier("test_temp.txt", "Contenu de test")

    print("\n   2Ô∏è‚É£ Test lecture de fichier existant :")
    contenu = traiter_fichier("test_temp.txt")
    if contenu:
        print(f"   üìñ Contenu lu : {contenu}")

    print("\n   3Ô∏è‚É£ Test lecture de fichier inexistant :")
    traiter_fichier("fichier_inexistant.txt")

    # Nettoyage
    import os
    if os.path.exists("test_temp.txt"):
        os.remove("test_temp.txt")
        print("   üßπ Fichier temporaire supprim√©")


demo_structure_complete()

print("\nüé≠ EXEMPLE PRATIQUE COMPLET")
print("-" * 26)


def demo_exemple_pratique():
    """Exemple pratique avec calculatrice robuste"""

    print("üé≠ Calculatrice robuste avec gestion d'erreurs :")

    def calculatrice_robuste(expression):
        """Calculatrice qui g√®re les erreurs courantes"""

        print(f"\n   üßÆ Calcul de : {expression}")

        try:
            # Tentative d'√©valuation de l'expression
            resultat = eval(expression)

        except ZeroDivisionError:
            print("   ‚ùå Division par z√©ro d√©tect√©e")
            return None
        except NameError as e:
            print(f"   ‚ùå Variable non d√©finie : {e}")
            return None
        except SyntaxError as e:
            print(f"   ‚ùå Erreur de syntaxe : {e}")
            return None
        except TypeError as e:
            print(f"   ‚ùå Erreur de type : {e}")
            return None
        except Exception as e:
            # Capture g√©n√©rale pour les autres erreurs
            print(f"   ‚ùå Erreur inattendue : {type(e).__name__}: {e}")
            return None
        else:
            # Ex√©cut√© si aucune exception
            print(f"   ‚úÖ R√©sultat : {resultat}")
            return resultat
        finally:
            # Toujours ex√©cut√©
            print("   üìä Calcul termin√©")

    # Tests de la calculatrice
    expressions_test = [
        "2 + 3 * 4",           # Valide
        "10 / 2",              # Valide
        "10 / 0",              # Division par z√©ro
        "2 + abc",             # Variable non d√©finie
        "2 +",                 # Syntaxe invalide
        "len('hello')",        # Fonction valide
        "'hello' + 5",         # Erreur de type
    ]

    for expression in expressions_test:
        calculatrice_robuste(expression)


demo_exemple_pratique()

print("\n" + "=" * 50)
print("3. TYPES D'EXCEPTIONS COURANTES")
print("=" * 50)

print("\nüìö HI√âRARCHIE DES EXCEPTIONS")
print("-" * 28)


def demo_types_exceptions():
    """D√©monstration des types d'exceptions courantes"""

    print("üìö Types d'exceptions Python :")

    exceptions_exemples = [
        # (Type d'exception, Code qui l√®ve l'exception, Description)
        (ValueError, "int('abc')", "Valeur inappropri√©e pour le type"),
        (TypeError, "'hello' + 5", "Types incompatibles"),
        (IndexError, "[1,2,3][10]", "Index hors limites"),
        (KeyError, "{'a': 1}['b']", "Cl√© inexistante dans dictionnaire"),
        (AttributeError, "'hello'.non_existant", "Attribut inexistant"),
        (ZeroDivisionError, "10 / 0", "Division par z√©ro"),
        (FileNotFoundError, "open('inexistant.txt')", "Fichier introuvable"),
        (ImportError, "import module_inexistant", "Module introuvable"),
        (NameError, "print(variable_inexistante)", "Variable non d√©finie"),
        (SyntaxError, "eval('2 +')", "Erreur de syntaxe"),
    ]

    for i, (exception_type, code, description) in enumerate(exceptions_exemples, 1):
        print(f"\n   {i}Ô∏è‚É£ {exception_type.__name__} :")
        print(f"      Code : {code}")
        print(f"      Description : {description}")

        try:
            eval(code)
        except exception_type as e:
            print(f"      ‚ùå Exception captur√©e : {e}")
        except Exception as e:
            print(f"      ‚ö†Ô∏è Autre exception : {type(e).__name__}: {e}")


demo_types_exceptions()

print("\nüîç INFORMATIONS SUR LES EXCEPTIONS")
print("-" * 33)


def demo_infos_exceptions():
    """D√©monstration des informations sur les exceptions"""

    print("üîç Informations d√©taill√©es sur les exceptions :")

    def analyser_exception(code_test, description):
        """Analyser une exception en d√©tail"""
        print(f"\n   üìã Test : {description}")
        print(f"   Code : {code_test}")

        try:
            eval(code_test)
        except Exception as e:
            print(f"   üè∑Ô∏è Type : {type(e).__name__}")
            print(f"   üìù Message : {e}")
            print(f"   üìç Args : {e.args}")

            # Informations additionnelles pour certains types
            if hasattr(e, 'filename'):
                print(f"   üìÇ Fichier : {e.filename}")
            if hasattr(e, 'lineno'):
                print(f"   üìç Ligne : {e.lineno}")

    # Tests d'analyse d'exceptions
    tests = [
        ("10 / 0", "Division par z√©ro"),
        ("int('hello')", "Conversion invalide"),
        ("[1,2,3][5]", "Index invalide"),
        ("{'a': 1}['z']", "Cl√© invalide"),
        ("'text'.missing_method()", "M√©thode inexistante"),
    ]

    for code, desc in tests:
        analyser_exception(code, desc)


demo_infos_exceptions()

print("\n" + "=" * 50)
print("4. BONNES PRATIQUES")
print("=" * 50)

print("\n‚úÖ BONNES PRATIQUES DE GESTION D'ERREURS")
print("-" * 42)


def demo_bonnes_pratiques():
    """D√©monstration des bonnes pratiques"""

    print("‚úÖ Bonnes pratiques de gestion d'erreurs :")

    print("\n   1Ô∏è‚É£ √ätre sp√©cifique dans les exceptions :")

    # ‚ùå MAUVAIS : trop g√©n√©ral
    def mauvais_exemple():
        try:
            return int(input("Entrez un nombre : "))
        except:  # Trop g√©n√©ral !
            print("Une erreur s'est produite")
            return None

    # ‚úÖ BON : sp√©cifique
    def bon_exemple():
        try:
            return int(input("Entrez un nombre : "))
        except ValueError:
            print("Erreur : Veuillez entrer un nombre valide")
            return None
        except KeyboardInterrupt:
            print("Interruption utilisateur")
            return None

    print("      ‚ùå Mauvais : except g√©n√©rique sans type")
    print("      ‚úÖ Bon : except sp√©cifique avec type")

    print("\n   2Ô∏è‚É£ Messages d'erreur informatifs :")

    def valider_age(age_str):
        """Validation d'√¢ge avec messages informatifs"""
        try:
            age = int(age_str)
            if age < 0:
                raise ValueError(f"L'√¢ge ne peut pas √™tre n√©gatif : {age}")
            if age > 150:
                raise ValueError(f"L'√¢ge semble irr√©aliste : {age}")
            return age
        except ValueError as e:
            if "invalid literal" in str(e):
                print(f"   ‚ùå '{age_str}' n'est pas un nombre valide")
            else:
                print(f"   ‚ùå {e}")
            return None

    # Tests de validation
    ages_test = ["25", "-5", "200", "abc", "30.5"]
    for age_str in ages_test:
        print(f"      Test age '{age_str}' :", end=" ")
        resultat = valider_age(age_str)
        if resultat is not None:
            print(f"‚úÖ {resultat} ans")
        else:
            print("Invalide")

    print("\n   3Ô∏è‚É£ Gestion en cascade :")

    def traitement_en_cascade(donnees):
        """Exemple de gestion d'erreurs en cascade"""
        try:
            # √âtape 1 : Validation
            if not isinstance(donnees, list):
                raise TypeError("Les donn√©es doivent √™tre une liste")

            # √âtape 2 : Traitement
            resultats = []
            for item in donnees:
                try:
                    resultat = int(item) * 2
                    resultats.append(resultat)
                except ValueError:
                    print(
                        f"      ‚ö†Ô∏è √âl√©ment ignor√© : '{item}' (non num√©rique)")
                    continue

            # √âtape 3 : V√©rification du r√©sultat
            if not resultats:
                raise ValueError("Aucun √©l√©ment valide trouv√©")

            return resultats

        except TypeError as e:
            print(f"   ‚ùå Erreur de type : {e}")
            return []
        except ValueError as e:
            print(f"   ‚ùå Erreur de valeur : {e}")
            return []

    # Tests en cascade
    tests_cascade = [
        [1, 2, 3, 4],           # Valide
        ["1", "2", "3"],        # Cha√Ænes valides
        ["1", "abc", "3"],      # M√©lange valide/invalide
        ["abc", "def"],         # Tout invalide
        "pas une liste",        # Type incorrect
    ]

    for donnees in tests_cascade:
        print(f"      Test : {donnees}")
        resultat = traitement_en_cascade(donnees)
        print(f"      R√©sultat : {resultat}")


demo_bonnes_pratiques()


print("\n" + "=" * 50)
print("5. R√âSUM√â FINAL")
print("=" * 50)

print("""
üéØ POINTS CL√âS √Ä RETENIR :

1. üö® STRUCTURE DE BASE :
   ‚Ä¢ try : bloc de code √† risque
   ‚Ä¢ except : gestion des erreurs sp√©cifiques
   ‚Ä¢ else : ex√©cut√© si aucune exception
   ‚Ä¢ finally : toujours ex√©cut√©

2. üîß EXCEPTIONS MULTIPLES :
   ‚Ä¢ Plusieurs blocs except pour diff√©rents types
   ‚Ä¢ Ordre du plus sp√©cifique au plus g√©n√©ral
   ‚Ä¢ Exception comme derni√®re capture

3. üèóÔ∏è STRUCTURE COMPL√àTE :
   ‚Ä¢ try/except/else/finally
   ‚Ä¢ else : pour le code de succ√®s
   ‚Ä¢ finally : pour le nettoyage

4. üìö TYPES COURANTS :
   ‚Ä¢ ValueError : valeur inappropri√©e
   ‚Ä¢ TypeError : type incorrect
   ‚Ä¢ IndexError : index hors limites
   ‚Ä¢ KeyError : cl√© inexistante
   ‚Ä¢ FileNotFoundError : fichier manquant

5. ‚úÖ BONNES PRATIQUES :
   ‚Ä¢ Exceptions sp√©cifiques, pas g√©n√©rales
   ‚Ä¢ Messages d'erreur informatifs
   ‚Ä¢ Gestion en cascade appropri√©e
   ‚Ä¢ Nettoyage dans finally

üí° R√àGLES D'OR :
‚úÖ Capturer des exceptions sp√©cifiques
‚úÖ Fournir des messages d'erreur clairs
‚úÖ Nettoyer les ressources dans finally
‚úÖ Ne pas masquer les erreurs importantes
‚úÖ Utiliser else pour la logique de succ√®s

üö® √Ä √âVITER :
‚ùå except: sans type sp√©cifique
‚ùå Messages d'erreur vagues
‚ùå Ignorer les exceptions importantes
‚ùå Oublier le nettoyage des ressources
‚ùå Lever des exceptions dans finally

üéâ F√©licitations ! Gestion d'erreurs de base ma√Ætris√©e !
üí° Prochaine √©tape : Lever des exceptions personnalis√©es !
üìö Erreurs g√©r√©es, continuez vers les exceptions avanc√©es !
""")

print("\n" + "=" * 70)
print("üéØ FIN DU GUIDE - EXCEPTIONS DE BASE MA√éTRIS√âES !")
print("=" * 70)
